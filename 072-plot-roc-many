#!/usr/bin/env Rscript

# UNNAMED is a classifier of outlier sequences in multiple alignments
# Copyright (C) 2011  Aleksandr Levchuk
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


sh <- function(cmd){lines <- readLines(p <- pipe(cmd)); close(p); lines}

# Name of this script
script_path <- sub("--file=","", commandArgs()[grep("--file=", commandArgs())])
script_path_list <- strsplit(script_path, '/')[[1]]
script_name <- script_path_list[[length(script_path_list)]]

# Primary locations
EXPERIMENT_NAME <- sh("ls -1d ./trial-*/ | tail -1 | cut -d/ -f 2")
UPSTREAM_DIR <-
  paste(EXPERIMENT_NAME, "070-build-roc-classifer-data-out", sep="/")
OUT_DIR <- paste(EXPERIMENT_NAME, script_name, sep="/")

# Directory where this script is located
script_dir_list  <- script_path_list[1:(length(script_path_list)-1)]
script_dir  <- paste(script_dir_list, sep='/', collapse="/")


# How to use this script
usage_and_quit <- function() {
  cat(paste(script_name, " plots box plots per msa", "\n\n"))
  cat(paste("Usage:", script_name, "<sample-size>", "\n\n"))
  cat(paste(
    "Required Arguments",
    "  <sample-size> ",
    "",
    sep="\n"))
  quit()
}

# Check number of arguments
script_args <- commandArgs(trailingOnly=T)
if(length(script_args) == 0) usage_and_quit()
if(length(script_args) != 1) {
  cat("ERROR: Invalid number of arguments", length(script_args), "\n")
  usage_and_quit()
}

# Get arguments
SAMPLE_SIZE  <- script_args[[1]]


library(ROCR)
dir.create(OUT_DIR, showWarnings=F)

load(paste(UPSTREAM_DIR, "roc-all.Rdata"    , sep="/"))
#ls()
# q()


options(width=500)
#print(ROC_DF)
#q()
 




 
samples <- unique(ROC_DF$sample_id)
for (s in samples) {
local({
ROC_DF <- subset(ROC_DF, sample_id == s)



injection_ratios <- unique(ROC_DF$random_ratio)
for(inj in injection_ratios) {
local({
ROC_DF <- subset(ROC_DF, random_ratio == inj)


  #print(paste(s, inj, m))

  sample_id <- s
  print(sample_id)

  #roc_df$scoring_method

  # TODO: Move the up to 071-plot-roc
  w_1 <-  4; c_1 <- 2;
  w_2 <- 16; c_2 <- 9;
  w_3 <-  8; c_3 <- 3;
  w_4 <- 16; c_4 <- 8;
  w_5 <-  2; c_5 <- 4;
  w_new <-  1; c_new <- 1;
  
  png(paste(OUT_DIR, paste("sample-size",
     SAMPLE_SIZE, "-id", s,
     "-rand", sprintf("%.2f", inj),
     ".png", sep=""), sep="/"),
     width = 1750, height = 1750, units = "px", type="cairo")
  
  par(mar=c(10, 10, 5, 5), mgp=c(5, 1, 0))
  # MGP: distance of the axis labels
  #      distance of the tick mark labels
  #      distance of the tick mark symbols
  par(cex.lab=2, cex.axis=1.5, font.main=12)
  
  
  
  plot(c(0,1), c(1,0),
    xlab = "1 - True Negative Rate",
    ylab = "True Positive Rate",
    axes = FALSE)
  scoring_methods <- as.character(unique(ROC_DF$scoring_method))
  for (m in scoring_methods) {
  local({
  ROC_DF <- subset(ROC_DF, scoring_method == m)
    
    rocr <- ROCR_LIST[[ROC_DF$rocr_id]]
    p4plot <- performance(rocr, "tpr", "fpr")
    plot(p4plot, col=c_1, lwd=w_1, add=T)
    ### , axes = FALSE) # the axes option has no effect
  
    #plot(performance(p_3,"tpr","fpr"), col=c_3, lwd=w_3, add=T)
  })
  }

  
  
  axis(side=1, c())
  #axis(side=2, c(0, 1:40/40))
  #axis(side=3, c(0, 1:40/40))
  axis(2,signif(0:50/50, 2), las=2)
  axis(3,signif(0:50/50, 2), las=2)
  box()
  
  #grid(col="black") #lty=3, col="gray")
  abline(v=0:100/100, h=0:100/100, lty=3, col="gray") 
  
  
  legend("bottomright", inset=0.037, as.character(ROC_DF$leg_label[[1]]),
    title=paste("Injection Amount:", inj, "\n",
                "auc = area under the curve"),
    col = c(c_1), lwd = c(w_1), cex=1.5)
  dev.off()
  
  
  })
  }

})
}

