#!/bin/bash

# UNNAMED is a classifier of outlier sequences in multiple alignments
# Copyright (C) 2011  Aleksandr Levchuk
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


source ./api/pipeline.sh
set -e
set -u

# Tags: slow-import depends-on-opt

GUIDANCE_EXEC="./opt/guidance.v1.1/www/Guidance/guidance.pl"
MAFFT_PATH="./opt/mafft-6.857-with-extensions/bin"

# Tags: takes-optional-arguments

if [ $# != 1 ] && [ $# != 2 ]; then
  echo "Usage: $0 <sample-size>  [-s]" >&2
  echo "" >&2
  echo "  <sample-size>        You may have several sizes of samples." >&2
  echo "                       Which size group do you whan scored?" >&2
  echo "" >&2
  echo "  -f                   force always runing, never skip any steps" >&2
  exit 1
fi

# Arguments
SAMPLE_SIZE=$1                              # sample size (mandatory)
set +u
[ "$2" == '-f' ] && export ALWAYS_RUN=true
[ -n "$2" ] && [ "$2" != '-f' ] && (echo "Invalid option $2"; exit 1)
set -u


EXPERIMENT_NAME=$(ls -1d ./trial-*/ | tail -1 | cut -d/ -f 2)
UPSTREAM_DIR="./$EXPERIMENT_NAME/008-sample-data-out"

GUIDANCE_RUN_TEMPLATE="$0-scripts/guidance-run.sh.template"

DATA_IN="./$EXPERIMENT_NAME/$0-data-in"
DATA_OUT="./$EXPERIMENT_NAME/$0-data-out"
mkdir -p $DATA_IN $DATA_OUT 2> /dev/null && true

(cd $UPSTREAM_DIR
ls -d sample-size$SAMPLE_SIZE-*-list-*tab) | while read sample
do
  data_in_final="$DATA_IN/$sample-nogaps"
  function callback {
      mkdir -p $data_in_final{,-new} 2> /dev/null && true
      (cd "$UPSTREAM_DIR/$sample/"; ls -d *.tab) |
        while read file_name
        do
          cat "$UPSTREAM_DIR/$sample/$file_name" |
            tr -d "-"  | # remove gaps
	    awk '{print ">" $1 "\n" $2}' | # convert to fasta
            cat > "$data_in_final-new/$file_name-fasta.txt"
        done
      rm -rf $data_in_final
      mv $data_in_final{-new,}
  }
  upstream_done_time_prefix="$UPSTREAM_DIR/$sample"
  done_time_prefix=$data_in_final
  pipeline   $upstream_done_time_prefix   $done_time_prefix \
    "Importing 008-sample-data-out/$sample-list items \
     from $upstream_done_time_prefix to $done_time_prefix \
     converting to fasta and removing gaps (alignment information) \
     as we import" callback
done


echo "Creating tasks in $DATA_IN/tasks" >&2
mkdir -p $DATA_IN/tasks 2> /dev/null && true
(cd $DATA_IN; echo sample-size$SAMPLE_SIZE-*-list-tab*-nogaps | tr " " "\n") |
while read sample; do
  echo $sample
  (cd $DATA_IN/$sample; echo *.FASTA.tab-fasta.txt | tr " " "\n") |
  while read fasta_file; do
    out_sh="$DATA_IN/tasks/$sample-$fasta_file.sh"
    cat $GUIDANCE_RUN_TEMPLATE |
      sed "s|%%WD%%|`pwd`|g" |
      sed "s|%%ALWAYS_RUN%%|$ALWAYS_RUN|g" |
      sed "s|%%MAFFT_PATH%%|$MAFFT_PATH|g" |
      sed "s|%%GUIDANCE_EXEC%%|$GUIDANCE_EXEC|g" |
      sed "s|%%DATA_IN%%|$DATA_IN/$sample|g" |
      sed "s|%%FASTA_FILE%%|$DATA_IN/$sample/$fasta_file|g" |
      sed "s|%%DATA_OUT%%|$DATA_OUT/$sample/$fasta_file|g" |
        cat > $out_sh
      chmod +x $out_sh
  done
done
