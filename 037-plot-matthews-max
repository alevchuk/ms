#!/usr/bin/env Rscript

# GROUPBALANCER is a classifier of outlier sequences in multiple alignments
# Copyright (C) 2011  Aleksandr Levchuk
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# To run Bash commands
SH <- function(cmd){lines <- readLines(p <- pipe(cmd)); close(p); lines}

# Name of this script
script_path <-
  sub("--file=","", commandArgs()[grep("--file=", commandArgs())])
script_path_list <- strsplit(script_path, '/')[[1]]
script_name <- script_path_list[[length(script_path_list)]]

# Directory where this script is located
script_dir_list  <- script_path_list[1:(length(script_path_list)-1)]
script_dir  <- paste(script_dir_list, sep='/', collapse="/")

# Primary locations
EXPERIMENT_NAME <- SH("ls -1d ./trial-*/ | tail -1 | cut -d/ -f 2")
OUT_DIR <- paste(EXPERIMENT_NAME, "/", script_name, "-data-out", sep="")
UPSTREAM <- paste(EXPERIMENT_NAME, "/029-collect-scores-data-out", sep="")

# How to use this script
usage_and_quit <- function() {
  cat(paste(script_name, " plots max Matthews correlation coefficient",
    "\n\n"))
  cat(paste("Usage:", script_name, "<sample-size>", "\n\n"))
  cat(paste(
    "Required Arguments",
    "  <sample-size>  Sample size",
    "",
    sep="\n"))
  quit()
}

# Check number of arguments
script_args <- commandArgs(trailingOnly=T)
if(length(script_args) == 0) usage_and_quit()
if(length(script_args) != 1) {
  cat("ERROR: Invalid number of arguments", length(script_args), "\n")
  usage_and_quit()
}

# Get arguments
SAMPLE_SIZE  <- script_args[[1]]

# Porject conventions
SAMPLE_FILES <- SH(paste(
  "ls ", UPSTREAM, "/sample-size", SAMPLE_SIZE, "*-seq-scores", sep=""))

library(ggplot2)

# Font change approach from 
# http://stackoverflow.com/questions/4094094/modifying-fonts-in-ggplot2/4104295
theme_min <- function (size=10, font=NA, face='plain', axisColor='#999999', 
    textColor='black') 
{
    theme_text = function(...)
        ggplot2::theme_text(family=font, face=face, colour=textColor, 
            size=size, ...)
opts(
    axis.text.x = theme_text(),
    axis.text.y = theme_text(),
    axis.title.x = theme_text(),
    axis.title.y = theme_text(angle=90, vjust=unit(0.5, "mm")),
    strip.text.x = theme_text(),
    strip.text.y = theme_text(angle=-90),
    legend.text = theme_text(hjust=0),
    legend.title = theme_text(hjust=0),
    plot.title = theme_text(hjust=0),
    plot.margin = unit(c(3,3,3,3), "mm")
    )
}



dir.create(OUT_DIR, showWarnings=FALSE)



plot_matthews_max <- function(scores_df, injection_types,
                              scoring_methods, info, cutoffs_outfile) {
  print(scoring_methods)

  if (length(scoring_methods) != 3) {
    cat("ERROR: I only know how to handle 2 scoring methods\n")
    quit()
  }

  mini_df <- data.frame()
      
  # Do not plot the 0 injections
  injection_types <- injection_types[injection_types != 0.00]

  for(injection_type in injection_types) {
    local({

      scores_df <- scores_df[scores_df[,'rand'] == injection_type,]


      #print(c("scores_df", "injection_type"))
      #print(scores_df) # Empty! ???
      #print(injection_type)



      both <- data.frame()
      g_cutoffs <- c()
      n_cutoffs <- c()

      for(scoring_method in scoring_methods) {
      #for(scoring_method in 'blast') {
        local({

          #print(c("scores_df", "scoring_method"))
          #print(scores_df) # Empty! ???
          #print(scoring_method) # guidance_seq_scr


          scores_df <- scores_df[scores_df[,'method'] == scoring_method,]

          # Sort by score (lowest scores on the bottom)
          scores_df <- scores_df[order(-scores_df[,"scr"]),]



          # Frequently used subset (after sorting!)
          all_scores <- scores_df[,"scr"] 

          ## Choose cutoffs
          u_scores <- unique(scores_df$scr)
          cutoffs <- sapply(1:(length(u_scores) - 1), function(i) {
            u_scores[i] / 2 + u_scores[i + 1] / 2
          })

          # Historic 2011-10-07 bug: Cutoffs made unique but scores were not.
          #                          This introduced cuts "in between"
          #                          duplicate scores.
          #cutoffs <- unique(cutoffs)


          # Good to see during development
	  print(scores_df)
          print(cutoffs)


          # Running into one of these extreams should become
          # obvious, but we have them here to capture all possible cutoffs
          cutoffs <- c(max(all_scores) + 10, cutoffs, min(all_scores) - 10)

          if (scoring_method == "guidance_seq_scr") {
            # Guidance goes first alphabetically
            both <<- scores_df[,c('seqid', 'scr')]
            colnames(both) <<- c('seqid', 'g_scr')

            g_cutoffs <<- cutoffs
          }

          if (scoring_method == "normd_dx_mod_seq_scr") {
            both <<- merge(both, scores_df[,c('seqid', 'scr')])
            names(both)[names(both) == 'scr'] <<- 'n_scr'

            n_cutoffs <<- cutoffs
          } 

          # True positives
          tp <- sapply(cutoffs, function(cutoff) {
            predicted_positive <- (all_scores > cutoff)
            length(which(scores_df[predicted_positive, "Known"] == "Positive"))
          })

          # True negatives
          tn <- sapply(cutoffs, function(cutoff) {
            predicted_negative <- (all_scores < cutoff)
            length(which(scores_df[predicted_negative, "Known"] == "Negative"))
          })

          # False positives
          fp <- sapply(cutoffs, function(cutoff) {
            predicted_positive <- (all_scores > cutoff)
            length(which(scores_df[predicted_positive, "Known"] != "Positive"))
          })

          # False negatives
          fn <- sapply(cutoffs, function(cutoff) {
            predicted_negative <- (all_scores < cutoff)
            length(which(scores_df[predicted_negative, "Known"] != "Negative"))
          })


          # Historic 2011-09-19 bug: be sqrt((tp+fp)*(tp+fn)*(tn+fp)*(tn*fn))
          m <-
            ((tp * tn) - (fp * fn)) / sqrt((tp+fp)*(tp+fn)*(tn+fp)*(tn+fn))
          #matthews[is.na(matthews) | matthews == Inf | matthews == -Inf] <- 0

          # Order of next 2 lines matters
          m[fp == 0 & fn == 0] <- 2  # 2x best
          m[tp == 0 | tn == 0] <- -1 # worst

          m[-Inf] <- -1 # worst if fp*fn is greater than tp*tn
          # TODO: In extreams allow tn=0 xor tp=0
          #   but there cut gaps may be a problem

          matthews <- m
          mmax <- max(matthews)
          m_pos <- which(matthews == mmax)
          m_cutoff <- cutoffs[m_pos]

          print(c(
           #"cutoffs",
           "matthews","mmax","m_pos", "m_cutoff"))
          #print(cutoffs)
          print(matthews)
          print(mmax)
          print(m_pos)
          print(m_cutoff)

          mini_df <<-
            rbind(mini_df, 
              data.frame(
                Injection_Type=signif(injection_type, 2),
                Max_Matt_Cutoff=m_cutoff[[1]],
                Scoring_Method=factor(scoring_method,
                levels=scoring_methods),
                Ground_Truth="Known"
              )
            )

        })
      } # Scoring  method
      #q()



      # above this line - known


      # ------------------------------------------------------------


      # bellow this line - predicted

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      # Lets take NorMD the base truth
      # but taking Guidance should be mathematically symmetrical
      # and results would be identical.
      # Hint: Easy way to test for bugs
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      base_truth_scoring_method <- "normd_dx_mod_seq_scr"
      base_truth_scr <- "n_scr"
      base_truth_cutoffs <- n_cutoffs

      subject_scoring_method <- "guidance_seq_scr"
      subject_scr <- "g_scr"
      subject_cutoffs <- g_cutoffs

      # NOTE: The worst Matthews correlation coefficient is -1 by definition
      # NOTE: matt_max may have multiple rows due to co-optimal solutions
      # NOTE: Coeff in matt_max data frame will be the same in all rows
      #bt_matt_best_cutoff <- -1000
      #subject_matt_best_cutoff <- -1000
      max_matt_df <-
        data.frame(coeff=-2, subject_cutoff=-1000, bt_cutoff=-1000)

      # Sort for easier bug hunting
      both <- both[order(-both[,subject_scr]),]
      sapply(base_truth_cutoffs, function(bt_cutoff) {

        m_df <-
        sapply(subject_cutoffs, function(subject_cutoff) {
          # "True" positives
          predicted_positive <- both[both[,subject_scr] > subject_cutoff,]
          tp <- length(which(predicted_positive[,base_truth_scr] > bt_cutoff))

          # "True" negatives
          predicted_negative <- both[both[,subject_scr] < subject_cutoff,]
          tn <- length(which(predicted_negative[,base_truth_scr] < bt_cutoff))

          # "False" positives
          fp <- length(which(predicted_positive[,base_truth_scr] < bt_cutoff))
          
          # "False" negatives
          fn <- length(which(predicted_negative[,base_truth_scr] > bt_cutoff))

          # Historic 2011-09-19 bug: sqrt((tp+fp)*(tp+fn)*(tn+fp)*(tn*fn))
          m <- ((tp * tn) - (fp * fn)) / sqrt((tp+fp)*(tp+fn)*(tn+fp)*(tn+fn))

          # Order of these two matters
          m[fp == 0 & fn == 0] <- 2  # 2x best
          m[tp == 0 | tn == 0] <- -1 # worst
          m[-Inf] <- -1 # fp*fn is greater than tp*tn

          #if (tp == 0 || tn == 0) m <- -1 # worst
          #if (fp == 0 && fn == 0) m <- 2  # 2x best

          list(counts=paste(tp,tn,fp,fn, sep="-"), matthews=m)
        })
        m_df <- as.data.frame(t(m_df))
        matthews_per_each_subject_cutoff <- as.numeric(m_df$matthews)

        #print(subject_cutoffs)
        matthews_per_each_subject_cutoff[
         is.na(matthews_per_each_subject_cutoff)] <- -2

        # Local
        max_matt <- max(matthews_per_each_subject_cutoff)
        max_matt_subject_cutoff <- 
          subject_cutoffs[which(matthews_per_each_subject_cutoff ==
          max_matt)]

        # Global
        if (max_matt >= max_matt_df$coeff[[1]]) {
          if (max_matt > max_matt_df$coeff[[1]]) {
            # Strictly better? Overwrites the current best-record!
            max_matt_df <<- data.frame(coefficient=max_matt,
              subject_cutoff=max_matt_subject_cutoff, bt_cutoff=bt_cutoff)

          } else { # Do not throw away co-optimals

            # Do not add cuts that are on the extremes. TODO: Test this
            if (length(which(bt_cutoff < both[,base_truth_scr])) != 0 &&
                length(which(bt_cutoff > both[,base_truth_scr])) != 0 &&
                length(which(max_matt_subject_cutoff >
                  both[,subject_scr])) != 0 &&
                length(which(max_matt_subject_cutoff <
                  both[,subject_scr])) != 0) {

              ### print("Right before rbind")
              ### print(max_matt)
              ### print(max_matt_subject_cutoff)
              ### print(bt_cutoff)
              for (sub_cutoff_i in max_matt_subject_cutoff) {
                max_matt_df <<- rbind(max_matt_df,
                  list(coefficient=max_matt, subject_cutoff=sub_cutoff_i,
                       bt_cutoff=bt_cutoff)
                )
              }
            }
          }
        }

        ## ++++++++++ bug search / check +++++++++++++
        ### print(both)
        ### cat("Base truth (", base_truth_scr, ") cutoff: ", bt_cutoff, "\n")
        ### print(as.numeric(m_df$matthews))
        ### print(as.character(m_df$counts))

        ### cat("Base truth (", base_truth_scr, ") max matt cutoff: ",
        ###   max_matt_df$bt_cutoff, "\n")
        ### cat("Subject (", subject_scr, ") max matt cutoff: ",
        ###   max_matt_df$subject_cutoff, "\n")

        ### print("+++++++++++++++++++++++++++++++++++++")

      })



      # Handle co-optinal solutions for Subject and
      # Handle co-optinal solutions for Base-Truth (BT) separatly!

      # (A) Subject
      # Precondition: there are no co-optimal cuts on the extremes

      if (length(max_matt_df$subject_cutoff) > 1) {
        print("Co-optimal solution!")
        print("max_matt_df")
        print(max_matt_df)

        # Get nearest score
        subject_closest_score <-
          sapply(max_matt_df$subject_cutoff, function(i){
            # first cutoff that's less
            both[,subject_scr][both[,subject_scr] < i][[1]]
          })

        print(subject_closest_score)
        subject_cut_gaps <- max_matt_df$subject_cutoff - subject_closest_score
        subject_winner_loc <- which(subject_cut_gaps == max(subject_cut_gaps))

        # Could still have more than 1 rows 
        max_matt_df <- max_matt_df[subject_winner_loc,]
      }


      #  # (B) Base truth
      if (length(max_matt_df$bt_cutoff) > 1) {
        # Precondition: there are no co-optimal cuts on the extremes

        # Get nearest score
        bt_closest_score <- sapply(max_matt_df$bt_cutoff, function(i){
            # first one that's less
            both[,base_truth_scr][both[,base_truth_scr] < i][[1]]
          })

        print(bt_closest_score)
        bt_cut_gaps <- max_matt_df$bt_cutoff - bt_closest_score
        bt_winner_loc <- which(bt_cut_gaps == max(bt_cut_gaps))

        if (length(bt_winner_loc) != 1) {
          print("bt_closest_score, bt_cut_gaps, bt_winner_loc")
          print(bt_closest_score)
          print(bt_cut_gaps)
          print(bt_winner_loc)
          write("WARNING: Cannot deicide among co-optimal solutions!\n",
            stderr())
 
          bt_winner_loc <- bt_winner_loc[[1]]
        }

        max_matt_df <- max_matt_df[bt_winner_loc,]

        print("Co-optimal solution winnner:")
        print(max_matt_df)
      }



      #quit() # Debug 1 msa

      # Historic 2011-09-18
      ### For how many seqences do we agree to keep
      #agreement <- length(intersect(
      #  both[both[subject_scr,] > subject_matt_best_cutoff, 'seqid'],
      #  both[both[base_truth_scr,] > bt_matt_best_cutoff, 'seqid'])) ** 2
      
      #print(subject_matt_best)

      mini_df <<-
        rbind(mini_df, 
          data.frame(
            Injection_Type=signif(injection_type, 2),
            Max_Matt_Cutoff=max_matt_df$bt_cutoff,

            Scoring_Method=factor(base_truth_scoring_method,
              levels=scoring_methods),
            Ground_Truth="Ab Initio"
        )
      )

      mini_df <<-
        rbind(mini_df, 
          data.frame(
            Injection_Type=signif(injection_type, 2),
            Max_Matt_Cutoff=max_matt_df$subject_cutoff,

            Scoring_Method=factor(subject_scoring_method,
              levels=scoring_methods),
            Ground_Truth="Ab Initio"
        )
      )


    })
  } # Injection Type

  #print(mini_df)
  write.table(cbind(mini_df, info$msa), file=cutoffs_outfile, sep="\t",
    append=T, row.names=F, col.names=F)
  flush(cutoffs_outfile)

  # Plot Matthews 
  png(paste(info$sample_dir, "/", info$msa, ".png", sep=""),
      width=500, height=500, type="cairo")

  g <- ggplot(data=mini_df,
       aes(x=Injection_Type, y=Max_Matt_Cutoff, color=Ground_Truth)) +
       geom_point() + scale_size(legend = FALSE) +
       geom_line(alpha=.5, size=3) +
       facet_grid(Scoring_Method ~ ., scales = "free") +
       theme_min(size=18) +
       opts(title=paste("MSA", info$msa))

    #geom_line() + geom_point() + opts(title=scoring_method)

  print(g)
  dev.off()

}


# Reshaper
add_known_column <- function(scores_df) {
  # Mark +/- based on the sequence name
  scores_df <- cbind(scores_df,
    Known=factor("Positive", levels=c("Positive", "Negative")))

  locations_of_negatives <- grep("_RAND[0-9]", scores_df[,'seqid'])
  if (length(locations_of_negatives) > 0) {
    scores_df[locations_of_negatives, "Known"] <- "Negative"
  }

  scores_df
}

for(sample_file in SAMPLE_FILES) {

  scores_df <- read.table(sample_file)
  colnames(scores_df) <-
    c('scr', 'rand', 'unused', 'msa', 'method', 'seqid')

  injection_types <- 
    as.numeric(sort(unique(as.character(scores_df[,'rand']))))

  #scoring_methods <- 'blast'
  scoring_methods <- sort(as.character(unique(scores_df[,'method'])))

  sample_id <- SH(sprintf(
   "ruby -e '\"%s\" =~ /sample-size[0-9]+-id([0-9]+)/; puts $1'",
   sample_file))

  sample_dir <-
    paste(OUT_DIR, "/sample-size", SAMPLE_SIZE, "-id", sample_id, sep="")
  dir.create(sample_dir, showWarnings=FALSE)

  # Open files for writing scores
  cutoffs_outfile <- file(paste(sample_dir, "-cutoffs", sep=""))
  open(cutoffs_outfile, "w")

  # All alignent in the sample
  msa_list <- sort(as.character(unique(scores_df[,'msa'])))

  #for(msa in c("COG2009")) {
  #for(msa in c("COG0555")) {
  #for(msa in c("PRK04885")) {
  #for(msa in c("PRK11574")) {
  for(msa in msa_list) {
    local({
      scores_df <- scores_df[scores_df[,'msa'] == msa,]


      #
      # Check that all injection types exists
      #
      injection_types_here <-
        as.numeric(sort(unique(as.character(scores_df[,'rand']))))
      non_existing_injection_types <-
        setdiff(injection_types, injection_types_here)


      #
      # Check that all scoring methods exists
      #
      scoring_methods_here <-
        sort(as.character(unique(scores_df[,'method'])))
      #scoring_methods_here <- 'blast'

      non_existing_scoring_methods <-
        setdiff(scoring_methods_here,scoring_methods)


      if (length(non_existing_injection_types) > 0) {
        write(paste("WARNING: Rand", non_existing_injection_types,
          " does not exist for MSA ", msa, " in ", sample_dir, sep=""),
          stderr())

      } else if (length(non_existing_scoring_methods) > 0) {
         write(paste("WARNING: ", non_existing_scoring_methods,
           " does not exist for MSA ", msa, " in ", sample_dir, sep=""),
           stderr())

      } else {

        scores_df <- add_known_column(scores_df)

        plot_matthews_max(scores_df,
          injection_types = injection_types,
          scoring_methods = scoring_methods,
          info = list(sample_id=sample_id, sample_dir=sample_dir, msa=msa),
          cutoffs_outfile = cutoffs_outfile)
      }
      #cat("\n\n\n\n\n")

    })
  }

}
