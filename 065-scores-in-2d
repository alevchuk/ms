#!/usr/bin/env Rscript

# UNNAMED is a classifier of outlier sequences in multiple alignments
# Copyright (C) 2011  Aleksandr Levchuk
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


sh <- function(cmd){lines <- readLines(p <- pipe(cmd)); close(p); lines}

# Name of this script
script_path <- sub("--file=","", commandArgs()[grep("--file=", commandArgs())])
script_path_list <- strsplit(script_path, '/')[[1]]
script_name <- script_path_list[[length(script_path_list)]]

# Directory where this script is located
script_dir_list  <- script_path_list[1:(length(script_path_list)-1)]
script_dir  <- paste(script_dir_list, sep='/', collapse="/")


# Primary locations
EXPERIMENT_NAME <- sh("ls -1d ./trial-*/ | tail -1 | cut -d/ -f 2")
OUT_DIR <- paste(EXPERIMENT_NAME, "/", script_name, "-data-out", sep="")
UPSTREAM <- paste(EXPERIMENT_NAME, "/029-collect-scores-data-out", sep="")
UPSTREAM2 <- paste(EXPERIMENT_NAME,
                       "/062-balance-scores-perfectly-data-out", sep="")
UPSTREAM3 <- paste(EXPERIMENT_NAME, "/061-scale-scores-data-out", sep="")


dir.create(OUT_DIR, showWarnings=FALSE)
dir.create(sprintf("%s/bw", OUT_DIR), showWarnings=FALSE)

# How to use this script
usage_and_quit <- function() {
  cat(paste(script_name, " plots box plots per msa", "\n\n"))
  cat(paste("Usage:", script_name, "<sample-size>", "\n\n"))
  cat(paste(
    "Required Arguments",
    "  <sample-size> ",
    "",
    sep="\n"))
  quit()
}

# Check number of arguments
script_args <- commandArgs(trailingOnly=T)
if(length(script_args) == 0) usage_and_quit()
if(length(script_args) != 1) {
  cat("ERROR: Invalid number of arguments", length(script_args), "\n")
  usage_and_quit()
}

# Get arguments
SAMPLE_SIZE  <- script_args[[1]]


# Porject conventions
SAMPLE_FILES <- sh(paste(
  "ls ", UPSTREAM, "/sample-size", SAMPLE_SIZE, "*-seq-scores", sep=""))
SAMPLE_FILES_BALANCED <- sh(paste(
  "ls ", UPSTREAM2, "/sample-size", SAMPLE_SIZE,
  "*-balanced-scores-tab", sep=""))
SAMPLE_FILES_SCALED <- sh(paste(
  "ls ", UPSTREAM3, "/sample-size", SAMPLE_SIZE,
  "*-scaled-scores-tab", sep=""))


ALL_SCORES <-
  data.frame(scores=SAMPLE_FILES,
    scaled_scores=SAMPLE_FILES_SCALED,
    balanced_scores=SAMPLE_FILES_BALANCED)




reshape_data <- function(scores_df, rand) {

  # Mark +/- based on the sequence name
  n <- colnames(scores_df)
  scores_df <- cbind(scores_df,
    factor("Positive", levels=c("Positive", "Negative")))
  colnames(scores_df) <- c(n, "Actual")
  if (rand > 0) {
    locations_of_negatives <- grep("_RAND[0-9]", scores_df[,'seqid'])
    scores_df[locations_of_negatives, "Actual"] <- "Negative"
  }

  # TODO: Relocate the follwoing line to collect-scores
  scores_df[,"seqid"] <- gsub("[|]", "__", scores_df[,"seqid"]) # as for Blast

  scores_df
}




library(ggplot2)

##############
# Plotter
##############
plot_scores_in_2d <- function(scores_df, info) {

  
  colnames(scores_df)[colnames(scores_df) == info$column_of_data_for_x] <- 'x'
  colnames(scores_df)[colnames(scores_df) == info$column_of_data_for_y] <- 'y'
  info$label_x
  info$label_y


  g_opts <-
    opts(
       axis.title.y = theme_text(size=16, angle=90),
       axis.title.x = theme_text(size=16, vjust=0.03),
       axis.text.x = theme_text(size=16),
       axis.text.y = theme_text(size=16),

       title = paste(sprintf("%.2f", info$injection_type),
                     "unrelated sequences injected")
     )   


  ##################
  # Color
  ##################
  png(paste(
    OUT_DIR, "/sample-size", SAMPLE_SIZE, "-id", info$sample_id,
    "-rand", sprintf("%.2f", info$injection_type),
    "-", info$label_x, "-", info$label_y,
    ".png", sep=""),
    width=800, heigh=800, type="cairo")

   g_color <- ggplot(scores_df, aes(x=x, y=y)) +
     geom_point(aes(shape=Actual, colour=Actual), size=5, alpha=0.2) +
     g_opts +
     scale_y_continuous(limits=info$ylim) +
     xlab(info$label_x) +
     ylab(info$label_y)

  if (any(grep(ignore.case=T, "scaled", info$label_x)) ||
      any(grep(ignore.case=T, "balance", info$label_x))) {
    g_color <- g_color + 
      geom_line(data=data.frame(x=c(0,1), y=c(1,0)), aes(x=x, y=y)) +
      geom_line(data=data.frame(x=c(.5,.5), y=c(0,1)), aes(x=x, y=y)) +
      geom_line(data=data.frame(x=c(0,1), y=c(.5,.5)), aes(x=x, y=y))
  }

  print(g_color)
  dev.off() 

  ##################
  # Black and White
  ##################
  png(paste(
    OUT_DIR, "/bw/sample-size", SAMPLE_SIZE, "-id", info$sample_id,
    "-rand", sprintf("%.2f", info$injection_type),
    "-", info$label_x, "-", info$label_y,
    ".png", sep=""),
    width=800, heigh=800, type="cairo")

  ## Revers order of colors and shapes
  #scores_df$Actual <-
  #  factor(scores_df$Actual, levels = rev(levels(scores_df$Actual)))

  g_bw <- ggplot(scores_df, aes(x=x, y=y)) +
     geom_point(aes(shape=Actual, colour=Actual), size=5, alpha=0.7) +
     theme_bw() +
     scale_colour_grey() +
     g_opts +
     scale_y_continuous(limits=info$ylim) +
     xlab(info$label_x) +
     ylab(info$label_y)

  if (any(grep(ignore.case=T, "scaled", info$label_x)) ||
      any(grep(ignore.case=T, "balance", info$label_x))) {
    g_bw <- g_bw + 
      geom_line(data=data.frame(x=c(0,1), y=c(1,0)), aes(x=x, y=y)) +
      geom_line(data=data.frame(x=c(.5,.5), y=c(0,1)), aes(x=x, y=y)) +
      geom_line(data=data.frame(x=c(0,1), y=c(.5,.5)), aes(x=x, y=y))
  }

  print(g_bw)
  dev.off() 
}


#print(ALL_SCORES)
#q()

for(sample_i in 1:nrow(ALL_SCORES)) {
  #sample_file in SAMPLE_FILES) {

  sample_file <- as.character(ALL_SCORES[sample_i,]$scores)
  balanced_sample_file <-
    as.character(ALL_SCORES[sample_i,]$balanced_scores)
  scaled_sample_file <-
    as.character(ALL_SCORES[sample_i,]$scaled_scores)


  print(sample_file)
  print(balanced_sample_file)

  scores_df <- read.table(sample_file)
  colnames(scores_df) <-
    c('scr', 'rand', 'unused', 'msa', 'method', 'seqid')
  injection_types <- setdiff(sort(unique(scores_df[,'rand'])), 0.00)
  #injection_types <- sort(unique(scores_df[,'rand']))



  balanced_scores_df <- read.table(balanced_sample_file)
  colnames(balanced_scores_df) <-
    c('scr', 'rand', 'unused', 'msa', 'method', 'seqid')

  balanced_scores_df$method <- as.character(balanced_scores_df$method)

  balanced_scores_df[balanced_scores_df$method ==
    "guidance_seq_scr", "method"] <- "guidance_balanced"
  balanced_scores_df[balanced_scores_df$method ==
    "normd_dx_mod_seq_scr", "method"] <- "normd_balanced"

  balanced_scores_df[balanced_scores_df$method ==
    "blast", "method"] <- "blast_balanced"


  scaled_scores_df <- read.table(scaled_sample_file)
  colnames(scaled_scores_df) <-
    c('scr', 'rand', 'unused', 'msa', 'method', 'seqid')

  scaled_scores_df$method <- as.character(scaled_scores_df$method)

  scaled_scores_df[scaled_scores_df$method ==
    "guidance_seq_scr", "method"] <- "guidance_scaled"
  scaled_scores_df[scaled_scores_df$method ==
    "normd_dx_mod_seq_scr", "method"] <- "normd_scaled"


  #print(balanced_scores_df[1:100,])
  #print(scores_df[1:100,])
  #q()
  scores_df  <- rbind(scores_df, balanced_scores_df, scaled_scores_df)
  #print(scores_df)
  #q()

  for(injection_type in injection_types) {
    local({
      scores_df <- scores_df[scores_df[,'rand'] == injection_type,]
      scoring_methods <- sort(as.character(unique(scores_df[,'method'])))

      sample_id <- sh(sprintf(
        "ruby -e '\"%s\" =~ /sample-size[0-9]+-id([0-9]+)/; puts $1'",
        sample_file))

      scores_df <- reshape_data(scores_df, injection_type)

      gscores_df <- subset(scores_df, method == "guidance_seq_scr")
      nscores_df <- subset(scores_df, method == "normd_dx_mod_seq_scr")
      gscores_s_df <- subset(scores_df, method == "guidance_scaled")
      nscores_s_df <- subset(scores_df, method == "normd_scaled")
      gscores_b_df <- subset(scores_df, method == "guidance_balanced")
      nscores_b_df <- subset(scores_df, method == "normd_balanced")
      blast_df <- subset(scores_df, method == "blast_balanced")


      ##############################################
      # Balanced scores:  GUIDANCE + NorMD vs Blast
      ##############################################
      plot_scores_df <- merge(gscores_b_df, nscores_b_df,
        by=c("rand", "unused", "msa", "seqid", "Actual"))
      colnames(plot_scores_df) <-  c("rand", "unused", "msa",
            "seqid", "Actual", "gscore", "method_x", "nscore", "method_y")
      plot_scores_df <- cbind(plot_scores_df,
        list(coscore=(plot_scores_df$gscore + plot_scores_df$nscore)))
      options(width=1000)
      #print(blast_df)
      #print(plot_scores_df)
      #q()
      plot_scores_df <-
        merge(plot_scores_df[,c("rand", "msa", "seqid", "Actual", "coscore")],
            blast_df[,c("rand", "msa", "seqid", "Actual", "scr")],
            by=c("rand", "msa", "seqid", "Actual")
            )
      colnames(plot_scores_df) <- c("rand", "msa", "seqid", "Actual",
                                    "coscore", "bscore")

      plot_scores_df[,"coscore"] <- plot_scores_df[,"coscore"] / 2
      #print(plot_scores_df)
      #q()

      plot_scores_in_2d(plot_scores_df, 
        info=list(sample_id=sample_id,
                  injection_type=injection_type,

                  label_x="Prefectly_Balanced_BLAST_score",
                  label_y="Prefectly_Balanced_G_N_coscore",
                  column_of_data_for_x="bscore",
                  column_of_data_for_y="coscore" 
         )
      )
      #q()
      # method_x=plot_scores_df[1, "method_x"],
      # method_y=plot_scores_df[1, "method_y"])


      ##################
      # Raw scores
      ##################
      plot_scores_df <- merge(gscores_df, nscores_df,
        by=c("rand", "unused", "msa", "seqid", "Actual"))
      colnames(plot_scores_df) <- c("rand", "unused", "msa",
           "seqid", "Actual", "gscore", "method_x", "nscore", "method_y")

      plot_scores_in_2d(plot_scores_df, 
        info=list(sample_id=sample_id,
                  ylim=c(-0.1, 0.01), # This will cause some warnings

                  label_x="GUIDANCE",
                  label_y="NorMD",
                  column_of_data_for_x="gscore",
                  column_of_data_for_y="nscore",

                  injection_type=injection_type
             )
      )

      #####################################
      # Balanced scores: GUIDANCE vs NorMD
      #####################################
      plot_scores_df <- merge(gscores_b_df, nscores_b_df,
        by=c("rand", "unused", "msa", "seqid", "Actual"))

      colnames(plot_scores_df) <-  c("rand", "unused", "msa",
            "seqid", "Actual", "gscore", "method_x", "nscore", "method_y")

      plot_scores_in_2d(plot_scores_df, 
        info=list(sample_id=sample_id,
                  injection_type=injection_type,
                  label_x="GUIDANCE_Prefectly_Balanced",
                  label_y="NorMD_Prefectly_Balanced",
                  column_of_data_for_x="gscore",
                  column_of_data_for_y="nscore",

                  injection_type=injection_type
                 )
        )


      ##################
      # Scaled scores
      ##################
      plot_scores_df <- merge(gscores_s_df, nscores_s_df,
        by=c("rand", "unused", "msa", "seqid", "Actual"))
      colnames(plot_scores_df) <- c("rand", "unused", "msa",
            "seqid", "Actual", "gscore", "method_x", "nscore", "method_y")

      #print(plot_scores_df)
      plot_scores_in_2d(plot_scores_df, 
        info=list(sample_id=sample_id,
                  label_x="GUIDANCE_Scaled",
                  label_y="NorMD_Scaled",
                  column_of_data_for_x="gscore",
                  column_of_data_for_y="nscore",

                  injection_type=injection_type
                  )
      )
    })
  }
}
