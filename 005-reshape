#!/bin/bash

# UNNAMED is a classifier of outlier sequences in multiple alignments
# Copyright (C) 2011  Aleksandr Levchuk
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# Tags: very-slow

set -e
set -u

source ./api/pipeline.sh


CONVERT_FASTA_TO_TAB=./opt/misc-bioinfo-scripts/convert-fasta-to-tab

MIN_SEQ_LENGTH=8     # below this there are much less than 1000 seqs per length
MAX_SEQ_LENGTH=1000  # above this there are less seqs than per a given length



EXPERIMENT_NAME=$(ls -1d ./trial-*/ | tail -1 | cut -d/ -f 2)

CDD_EXTRACTED="./$EXPERIMENT_NAME/002-start-data-out/cdd-extracted"
UNIPROT_EXTRACTED="./$EXPERIMENT_NAME/002-start-data-out/uniprot-extracted"

DATA_OUT="./$EXPERIMENT_NAME/$0-data-out"
DATA_OUT_UNIPROT="$DATA_OUT/uniprot"
DATA_OUT_CDD="$DATA_OUT/cdd"

mkdir -p $DATA_OUT_UNIPROT $DATA_OUT_CDD 2> /dev/null && true



# Uniprot

function callback {
  mkdir -p $DATA_OUT_UNIPROT-new 2> /dev/null && true
    cat $UNIPROT_EXTRACTED/uniprot_{sprot,trembl}.fasta |
      $CONVERT_FASTA_TO_TAB | cut -s -f 2 |
      while read one_protein; do
        seq_len=${#one_protein}

        # Filer for the length criteria
        if [ $seq_len -ge $MIN_SEQ_LENGTH ] &&
          [ $seq_len -le $MAX_SEQ_LENGTH ]; then
            seq_len_padded=`printf "%04d" $seq_len`
            echo $one_protein >> \
              $DATA_OUT_UNIPROT-new/length$seq_len_padded-tab
        fi
      done

  # Dedup
  ls $DATA_OUT_UNIPROT-new/length*-tab | while read tab_file; do
    sort $tab_file | uniq > $tab_file-new
    mv $tab_file{-new,}
  done

  rm -rf $DATA_OUT_UNIPROT
  mv $DATA_OUT_UNIPROT{-new,}
}
parrent_done_time_prefix="$UNIPROT_EXTRACTED/uniprot_trembl.fasta"
done_time_prefix=$DATA_OUT_UNIPROT
pipeline   $parrent_done_time_prefix   $done_time_prefix \
  "Doing a reshape from $UNIPROT_EXTRACTED to $DATA_OUT_UNIPROT" \
  callback

exit


# CDD

function callback {
    mkdir -p $DATA_OUT/all-alignments-tab{,-new} 2> /dev/null && true
    ls $DATA_IN_EXTRACTED | 
      while read i; do
        cat $DATA_IN_EXTRACTED/$i | $CONVERT_FASTA_TO_TAB > \
          $DATA_OUT/all-alignments-tab-new/$i.tab
      done
    rm -rf $DATA_OUT/all-alignments-tab
    mv $DATA_OUT/all-alignments-tab{-new,}
}
parrent_done_time_prefix=$done_time_prefix
done_time_prefix=$DATA_OUT/all-alignments-tab
pipeline   $parrent_done_time_prefix   $done_time_prefix \
  "Converting to TAB: $DATA_IN_EXTRACTED to $DATA_OUT/all-alignments-tab" \
  callback # 12 min


function callback {
  ls -1 $DATA_OUT/all-alignments-tab/ > $DATA_OUT/msa-list-new
  mv $DATA_OUT/msa-list{-new,}

  cat $DATA_OUT/msa-list |
    while read i; do
      cat $DATA_OUT/all-alignments-tab/$i | wc -l | tr "\n" "\t"
      echo $i
    done > $DATA_OUT/msa-sizes-numseq-new
  mv $DATA_OUT/msa-sizes-numseq-new $DATA_OUT/msa-sizes-numseq
}
parrent_done_time_prefix=$done_time_prefix
done_time_prefix=$DATA_OUT/msa-sizes-numseq
pipeline   $parrent_done_time_prefix   $done_time_prefix \
  "Getting msa-{list,sizes-numseq} of $DATA_OUT/all-alignments-tab" \
  callback # 5m


function callback {
  rm -rf $DATA_IN_EXTRACTED-trimm{ing,ed}  # Danger Zone
  rm -rf $DATA_OUT/all-alignments-tab-trimm{ing,ed} # Danger Zone

  mv $DATA_IN_EXTRACTED{,-trimming} >&2 && true
  mv $DATA_OUT/all-alignments-tab{,-trimming} >&2 && true

  filter_regexp="^[1-3]`printf \"\t\"`"

  echo -n "Number of TAB files removed in data-out: "
  sort -n  $DATA_OUT/msa-sizes-numseq  | egrep "$filter_regexp" |
  awk '{print $2}' | while read tab_file; do
    fasta_file=${tab_file%.tab}
    rm -v $DATA_IN_EXTRACTED-trimming/$fasta_file
    rm -v $DATA_OUT/all-alignments-tab-trimming/$tab_file 2>&1 | wc -l
  done | awk '{s+=$1} END {print s}'

  mv $DATA_IN_EXTRACTED-trimm{ing,ed}
  mv $DATA_OUT/all-alignments-tab-trimm{ing,ed}

  echo "Extracting msa-sizes-numseq-trimmed from $DATA_OUT/msa-sizes-numseq"
  sort -n  $DATA_OUT/msa-sizes-numseq  | egrep -v "$filter_regexp" >\
    $DATA_OUT/msa-sizes-numseq-trimmed-new
  mv $DATA_OUT/msa-sizes-numseq-trimmed{-new,}
}
parrent_done_time_prefix=$done_time_prefix
done_time_prefix=$DATA_OUT/all-alignments-tab-trimmed
pipeline   $parrent_done_time_prefix   $done_time_prefix \
  "Trimming all alignments with 3 or less sequences" \
  callback # 18s


function callback {
  ls -1 $DATA_OUT/all-alignments-tab-trimmed/ > $DATA_OUT/msa-list-trimmed-new
  mv $DATA_OUT/msa-list-trimmed{-new,}

  cat $DATA_OUT/msa-list-trimmed |
    while read i; do
      head -1 $DATA_OUT/all-alignments-tab-trimmed/$i |
        awk '{print $2}' | tr -d "\n" | wc -c | tr "\n" "\t"
      echo $i
    done > $DATA_OUT/msa-sizes-length-trimmed-new
  mv $DATA_OUT/msa-sizes-length-trimmed{-new,}
}
parrent_done_time_prefix=$done_time_prefix
done_time_prefix=$DATA_OUT
pipeline   $parrent_done_time_prefix   $done_time_prefix \
  "Getting msa-{list,sizes-lengths} of $DATA_OUT/all-alignments-tab-trimmed" \
  callback # 6m20s
