#!/usr/bin/env Rscript

# UNNAMED is a classifier of outlier sequences in multiple alignments
# Copyright (C) 2011  Aleksandr Levchuk
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# To run Bash commands
SH <- function(cmd){lines <- readLines(p <- pipe(cmd)); close(p); lines}

# Name of this script
script_path <- sub("--file=","", commandArgs()[grep("--file=", commandArgs())])
script_path_list <- strsplit(script_path, '/')[[1]]
script_name <- script_path_list[[length(script_path_list)]]

# Directory where this script is located
script_dir_list  <- script_path_list[1:(length(script_path_list)-1)]
script_dir  <- paste(script_dir_list, sep='/', collapse="/")

# Scoring utilities
GUIDANCE_EXEC <- paste(script_dir,
  "opt/guidance.v1.1/www/Guidance/guidance.pl", sep="/")
MAFFT_PATH <- paste(script_dir,
  "opt/mafft-6.857-with-extensions/bin", sep="/")
NORMD_PER_SEQUENCE <- paste(script_dir,
  "080-remover-scripts/normd-per-sequence.sh", sep="/")

# Data formatting utilities
CONVERT_FASTA_TO_TAB <- paste(script_dir,
  "opt/misc-bioinfo-scripts/convert-fasta-to-tab", sep="/")

# Guidance build-in SEQ_RES_PAIR score
GUIDANCE_ROCR <- paste(script_dir, "trial-cdd-2011-08-v2.31-uniprot-2011-08",
"070-build-roc-classifer-data-out/predictions-guidance.Rdata", sep="/")

# NorMD modified change ratio variant
NORMD_DXMOD_ROCR <- paste(script_dir, "trial-cdd-2011-08-v2.31-uniprot-2011-08",
"070-build-roc-classifer-data-out/predictions-normd-mod-dx.Rdata", sep="/")

# How to use this script
usage_and_quit <- function() {
  cat(paste(script_name, "is a utility for MSA alignment cleanup", "\n\n"))
  cat(paste("Usage:", script_name, "<method> <e-mode> <in-msa>", "\n\n"))
  cat(paste(
    "Required Arguments",
    "  <method>  Scoring method. Must be: \"guidance\", \"normd_dxmod\", or \"best\"",
    "  <e-mode>  Expected true keeps and removals.",
    "            Must be: \"keep.99tpr\" or \"remove.99tnr\"",
    "  <in-msa>  Input multiple sequence alignment in TAB or FASTA format.",
    "",
    sep="\n"))
  quit()
}

# Check number of arguments
script_args <- commandArgs(trailingOnly=T)
if(length(script_args) == 0) usage_and_quit()
if(length(script_args) != 3) {
  cat("ERROR: Invalid number of arguments", length(script_args), "\n")
  usage_and_quit()
}

# Get arguments
SCORING_METHOD  <- script_args[[1]]
MODE <- script_args[[2]]
MSA_FASTA <- script_args[[3]]

# Check arguments
if (SCORING_METHOD != "guidance" && SCORING_METHOD != "normd_dxmod" && SCORING_METHOD != "best") {
  cat("ERROR: Method must be \"guidance\", \"normd_dxmod\", or \"best\" got \"",
    SCORING_METHOD, "\"\n\n", sep="")
  usage_and_quit()
}
if (MODE != "keep.99tpr" && MODE != "remove.99tnr") {
  cat("ERROR: Method must be \"keep.99tp\" or \"remove.99tn\", got \"",
    MODE, "\"\n\n", sep="")
  usage_and_quit()
}

# Load the ROCR object which contains previous data analysis
library(ROCR)

OUT_AS_METHOD = SCORING_METHOD
if (SCORING_METHOD == "best") {
  OUT_AS_METHOD = "best"
  if (MODE == "keep.99tpr") {
    SCORING_METHOD = "normd_dxmod"
  } else {
    SCORING_METHOD = "guidance"
  }
}

if (SCORING_METHOD == "guidance") {
  load(GUIDANCE_ROCR)
  ROCR_PRED <- p_1
} else if (SCORING_METHOD == "normd_dxmod") {
  load(NORMD_DXMOD_ROCR)
  ROCR_PRED <- p_5

}


#str(ROCR_PRED)
#..@ predictions:List of 1
#.. ..$ : num [1:6526] -0.000168 -0.000446 -0.000681 -0.000845 -0.001419 ...
#..@ labels     :List of 1
#.. ..$ : Ord.factor w/ 2 levels "0"<"1": 2 2 2 2 2 2 2 1 1 1 ...
#..@ cutoffs    :List of 1
#.. ..$ : num [1:3565] Inf 0.01239 0.01057 0.01032 0.00988 ...
#..@ fp         :List of 1
#.. ..$ : num [1:3565] 0 0 0 0 0 0 0 0 0 0 ...
#..@ tp         :List of 1
#.. ..$ : num [1:3565] 0 1 2 3 4 5 6 7 8 9 ...
#..@ tn         :List of 1
#.. ..$ : num [1:3565] 285 285 285 285 285 285 285 285 285 285 ...
#..@ fn         :List of 1
#.. ..$ : num [1:3565] 6241 6240 6239 6238 6237 ...
#..@ n.pos      :List of 1
#.. ..$ : int 6241
#..@ n.neg      :List of 1
#.. ..$ : int 285
#..@ n.pos.pred :List of 1
#.. ..$ : num [1:3565] 0 1 2 3 4 5 6 7 8 9 ...
#..@ n.neg.pred :List of 1


# True Positive Rate / False Positive Rate
tpr <- performance(ROCR_PRED, 'tpr')
fpr <- performance(ROCR_PRED, 'fpr')
# Formal class 'performance' [package "ROCR"] with 6 slots
#   ..@ x.name      : chr "Cutoff"
#   ..@ y.name      : chr "True positive rate"
#   ..@ alpha.name  : chr "none"
#   ..@ x.values    :List of 1
#   .. ..$ : num [1:3565] Inf 0.01239 0.01057 0.01032 0.00988 ...
#   ..@ y.values    :List of 1
#   .. ..$ : num [1:3565] 0 0.00016 0.00032 0.000481 0.000641 ...
#   ..@ alpha.values: list()
# Formal class 'performance' [package "ROCR"] with 6 slots
#   ..@ x.name      : chr "Cutoff"
#   ..@ y.name      : chr "False positive rate"
#   ..@ alpha.name  : chr "none"
#   ..@ x.values    :List of 1
#   .. ..$ : num [1:3565] Inf 0.01239 0.01057 0.01032 0.00988 ...
#   ..@ y.values    :List of 1
#   .. ..$ : num [1:3565] 0 0 0 0 0 0 0 0 0 0 ...
#   ..@ alpha.values: list()


# Pick the desired cutoff
tpr_cutoffs <- tpr@x.values[[1]]
tpr_values <- tpr@y.values[[1]]
fpr_cutoffs <- fpr@x.values[[1]]
fpr_values <- fpr@y.values[[1]]
if (paste(tpr_cutoffs, collapse="") != paste(fpr_cutoffs, collapse="")) {
  cat("ERROR: Assertion that tpr_cutoffs == fpr_cutoffs failed!")
  quit()
}
CUTOFF_LIST <- tpr_cutoffs

if (MODE == "keep.99tpr") {
  offsets <- tpr_values - .99 # Note: they remain sorted

  # Implies that I'm looking for the first value greater than .99
  CUTOFF_LOCATION <- which(offsets > 0)[[1]]
}
if (MODE == "remove.99tnr") {
  # TNR = Specificity = 1 - FPR
  tnr_values <- 1 - fpr_values
  offsets <- tnr_values - .99

  # Implies that I'm looking for the first value less than .99
  positive_offsets <- which(offsets > 0)
  CUTOFF_LOCATION <- positive_offsets[length(positive_offsets)]
}

TPR <<- tpr_values[[CUTOFF_LOCATION]]
FPR <<- fpr_values[[CUTOFF_LOCATION]]

CUTOFF <- CUTOFF_LIST[[CUTOFF_LOCATION]]
cat("MSA ", SCORING_METHOD, " score cutoff:\t", CUTOFF, "\n", sep="")

cat("+-------------------------------------------------------+\n")
cat("| TPR = True positive rate  = Sensitivity     = 1 - FNR |\n")
cat("| TNR = True negative rate  = Specificity     = 1 - FPR |\n")
cat("| FPR = False positive rate = 1 - Specificity = 1 - TNR |\n")
cat("| FNR = False negative rate = 1 - Sensitivity = 1 - TPR |\n")
cat("+-------------------------------------------------------+\n")
cat("Expected TPR:\t", signif(TPR, 4), "\n", sep="")
cat("Expected TNR:\t", signif(1 - FPR, 4), "\n", sep="")
cat("Expected FPR:\t", signif(FPR, 4), "\n", sep="")
cat("Expected FNR:\t", signif(1 - TPR, 4), "\n", sep="")
cat("The above expectations will hold under the follwoing conditions:\n",
  "\n",
  "  1. Close to 95% of the sequences of the input MSA are \n",
  "     one of the protein groups randomly sampled from CDD v2.31 (2011-08)\n",
  "\n",
  "  2. Close to 5% of the sequences in the input MSA are\n",
  "     randomly sampled from Uniprot v2011_08\n",
  "\n",
  "  3. The lengths of all sequences in Condition #2 are equial to\n",
  "     the average length of the sequence group in Condition #1\n\n")
cat("\n")


OUT_DIR <- paste(MSA_FASTA, "-remover", sep="")
dir.create(OUT_DIR, showWarnings=F)



cat("Re-shaping input MSA data format...\n")
PREPARED_FASTA_FILE_INPUT <- 
  paste(OUT_DIR, "/msa-fasta-tab-nogaps-fasta.txt", sep="")

if (ncol(read.table(MSA_FASTA, sep="\t")) == 2) { # fasta-TAB format detection
  SH(paste("cp ", MSA_FASTA, " ", 
    OUT_DIR, "/msa-fasta-tab.txt && echo 'Convert to tab Skipped'", sep=""))
} else {
  SH(paste("cat ", MSA_FASTA, " | ", CONVERT_FASTA_TO_TAB, " >",
    OUT_DIR, "/msa-fasta-tab.txt && echo 'Convert to tab OK'", sep=""))
}
SH(paste("cat ", OUT_DIR, "/msa-fasta-tab.txt | tr -d '-' >",
  OUT_DIR, "/msa-fasta-tab-nogaps.txt && echo 'Remove gaps OK'", sep=""))
SH(paste("cat ", OUT_DIR, "/msa-fasta-tab-nogaps.txt | ",
  "awk '{print \">\" $1 \"\\n\" $2}' >", PREPARED_FASTA_FILE_INPUT,
  " && echo 'Convert back to fasta OK'",
  sep=""))
cat("\n")



cat("Aligning and scoring...\n")
if (SCORING_METHOD == "guidance") {
  GUIDANCE_RESULTS_DIR <- paste(OUT_DIR, "/guidance", sep="")
  cmd <- paste(
    "done_time=", GUIDANCE_RESULTS_DIR, "-done\n",
    "if [ ! -f $done_time ] || [ ", MSA_FASTA, " -nt $done_time ] ",
    " || [ ", script_path, " -nt $done_time ] ",
    " || [ ", NORMD_PER_SEQUENCE, " -nt $done_time ] ; then\n",
    "  export PATH=", MAFFT_PATH, ":$PATH\n",
    "  ", GUIDANCE_EXEC, " --msaProgram MAFFT --seqType aa",
    " --seqFile ", PREPARED_FASTA_FILE_INPUT,
    " --outDir ", GUIDANCE_RESULTS_DIR, 
    " && touch ", GUIDANCE_RESULTS_DIR, "-done",
    " && echo 'GUIDANCE finished'\n",
    "else\n", 
    "  echo 'Already done.'\n",
    "fi\n",
    sep="")
  SH(cmd)

  SEQ_SCORES <- paste(GUIDANCE_RESULTS_DIR,
    "/MSA.MAFFT.Guidance_res_pair_seq.scr_with_Names", sep="")
  SCORES <- read.table(SEQ_SCORES, header=T)
  print(str(SCORES))
  quit()
  # ALREADY AS HEADER #colnames(SCORES) <- c('SEQUENCE_NAME', 'SEQUENCE_SCORE')


} else if (SCORING_METHOD == "normd_dxmod") {
  NORMD_RESULTS <- paste(OUT_DIR, "/normd-dx1-mod-seq-scores.txt", sep="")
  cmd <- paste(
    "set -e\n",
    "set -u\n",

    "done_time=", NORMD_RESULTS, "-done\n",

    "if [ ! -f $done_time ] || [ ", MSA_FASTA, " -nt $done_time ] ",
    " || [ ", script_path, " -nt $done_time ] ",
    " || [ ", NORMD_PER_SEQUENCE, " -nt $done_time ] ; then\n",
    "  ", NORMD_PER_SEQUENCE, " ", script_dir, "/opt/ ", OUT_DIR,
    "  && ",
    "  touch ", NORMD_RESULTS, "-done && echo 'NORMD finished'\n",

    "else\n", 
    "  echo 'Already done.'\n",

    "fi\n",
    sep="")
  print(SH(cmd))

   SCORES <- read.table(NORMD_RESULTS)
   colnames(SCORES) <- c('SEQUENCE_NAME', 'SEQUENCE_SCORE')
 }
 cat("\n")
 
 cat("Removing badly aligned or unrelated sequences...\n")
 BAD_SEQUENCES <- which(SCORES[, 'SEQUENCE_SCORE'] < CUTOFF)

SCORES[,'REMOVE?'] <- 'Keep'
SCORES[BAD_SEQUENCES,'REMOVE?'] <- 'Remove'

results <- SCORES[rev(order(SCORES[,'SEQUENCE_SCORE'])),]
results_file <-
  paste(OUT_DIR, "/results-", OUT_AS_METHOD, "-", MODE, ".txt", sep="")

write.table(file=results_file, results, sep="\t")
print(results)

cat("Number of sequences removed:\t", length(BAD_SEQUENCES), "\n", sep="")
