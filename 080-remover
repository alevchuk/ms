#!/usr/bin/env Rscript

# UNNAMED finds nonmember contaminations in protein sequence families
# Copyright (C) 2011  Aleksandr Levchuk
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# To run Bash commands
SH <- function(cmd){lines <- readLines(p <- pipe(cmd)); close(p); lines}

# Name of this script
script_path <- sub("--file=","", commandArgs()[grep("--file=", commandArgs())])
script_path_list <- strsplit(script_path, '/')[[1]]
script_name <- script_path_list[[length(script_path_list)]]

# Directory where this script is located
script_dir_list  <- script_path_list[1:(length(script_path_list)-1)]
script_dir  <- paste(script_dir_list, sep='/', collapse="/")

# Scoring utilities
GUIDANCE_EXEC <- paste(script_dir,
  "opt/guidance.v1.1/www/Guidance/guidance.pl", sep="/")
MAFFT_PATH <- paste(script_dir,
  "opt/mafft-6.857-with-extensions/bin", sep="/")
NORMD_PER_SEQUENCE <- paste(script_dir,
  "080-remover-scripts/normd-per-sequence.sh", sep="/")

# Data formatting utilities
CONVERT_FASTA_TO_TAB <- paste(script_dir,
  "opt/misc-bioinfo-scripts/convert-fasta-to-tab", sep="/")


# How to use this script
usage_and_quit <- function() {
  cat(paste(script_name,
    "finds nonmember contaminations in protein sequence families",
    "\n\n"))
  cat(paste("Usage:", script_name, " <in-msa> [--old]", "\n\n"))
  cat(paste(
    "Required Arguments",
    "  <in-msa>  Input TAB (id/seq 2-column) or FASTA",
    "            NOTE: MSA gaps will be ignored",
    "",
    "  --old     Optional. Use the old norMD+GUIDANCE",
    "            intercalibration algorithm",
    "",
    sep="\n"))
  quit()
}

# Check number of arguments
script_args <- commandArgs(trailingOnly=T)
if(length(script_args) == 0) usage_and_quit()
if(length(script_args) != 1 && length(script_args) != 2) {
  cat("ERROR: Invalid number of arguments", length(script_args), "\n")
  usage_and_quit()
}

OLD = F
if(length(script_args) == 2) {
  if(all(script_args != "--old")) {
    cat("ERROR: One of the two arguments must be \"--old\"", "\n")
    usage_and_quit()
  } else {
    OLD = T
    script_args <- script_args[script_args != "--old"]
  }
}

# Get arguments
MSA_FASTA <- script_args[[1]]








# cat("+-------------------------------------------------------+\n")
# cat("| TPR = True positive rate  = Sensitivity     = 1 - FNR |\n")
# cat("| TNR = True negative rate  = Specificity     = 1 - FPR |\n")
# cat("| FPR = False positive rate = 1 - Specificity = 1 - TNR |\n")
# cat("| FNR = False negative rate = 1 - Sensitivity = 1 - TPR |\n")
# cat("+-------------------------------------------------------+\n")
# cat("Expected TPR:\t", signif(TPR, 4), "\n", sep="")
# cat("Expected TNR:\t", signif(1 - FPR, 4), "\n", sep="")
# cat("Expected FPR:\t", signif(FPR, 4), "\n", sep="")
# cat("Expected FNR:\t", signif(1 - TPR, 4), "\n", sep="")
# cat("The above expectations will hold under the follwoing conditions:\n",
#   "\n",
#   "  1. Close to 95% of the sequences of the input MSA are \n",
#   "     one of the protein groups randomly sampled from CDD v2.31 (2011-08)\n",
#   "\n",
#   "  2. Close to 5% of the sequences in the input MSA are\n",
#   "     randomly sampled from Uniprot v2011_08\n",
#   "\n",
#   "  3. The lengths of all sequences in Condition #2 are equial to\n",
#   "     the average length of the sequence group in Condition #1\n\n")
# cat("\n")


OUT_DIR <- paste(MSA_FASTA, "-remover", sep="")
dir.create(OUT_DIR, showWarnings=F)



cat("Re-shaping input MSA data format...\n")
PREPARED_FASTA_FILE_INPUT <- 
  paste(OUT_DIR, "/msa-fasta-tab-nogaps-fasta.txt", sep="")

if (ncol(read.table(MSA_FASTA, sep="\t")) == 2) { # fasta-TAB format detection
  SH(paste("cp ", MSA_FASTA, " ", 
    OUT_DIR, "/msa-fasta-tab.txt && echo 'Convert to tab Skipped'", sep=""))
} else {
  SH(paste("cat ", MSA_FASTA, " | ", CONVERT_FASTA_TO_TAB, " >",
    OUT_DIR, "/msa-fasta-tab.txt && echo 'Convert to tab OK'", sep=""))
}
SH(paste("cat ", OUT_DIR, "/msa-fasta-tab.txt | tr -d '-' >",
  OUT_DIR, "/msa-fasta-tab-nogaps.txt && echo 'Remove gaps OK'", sep=""))
SH(paste("cat ", OUT_DIR, "/msa-fasta-tab-nogaps.txt | ",
  "awk -F\"\t\" '{print \">\" $1 \"\\n\" $2}' >", PREPARED_FASTA_FILE_INPUT,
  " && echo 'Convert back to fasta OK'",
  sep=""))





# ==============================
if (OLD) { # Indentless 1

cat("\n")
cat("Scoring with NorMD...\n")

NORMD_RESULTS <- paste(OUT_DIR, "/normd-dx1-mod-seq-scores.txt", sep="")
cmd <- paste(
  "set -e\n",
  "set -u\n",

  "done_time=", NORMD_RESULTS, "-done\n",

  "if [ ! -f $done_time ] || [ ", MSA_FASTA, " -nt $done_time ] ",
  #" || [ ", script_path, " -nt $done_time ] ",
  " || [ ", NORMD_PER_SEQUENCE, " -nt $done_time ] ; then\n",
  "  ", NORMD_PER_SEQUENCE, " ", script_dir, "/opt/ ", OUT_DIR,
  "  && ",
  "  touch ", NORMD_RESULTS, "-done && echo 'NORMD finished'\n",

  "else\n", 
  "  echo 'Already done.'\n",

  "fi\n",
  sep="")

print(SH(cmd))

N_SCORES <- read.table(NORMD_RESULTS, sep="\t")
colnames(N_SCORES) <- c('SEQUENCE_NAME', 'SEQUENCE_SCORE')

}
# ==============================


cat("\n")
cat("Scoring with GUIDANCE...\n")

GUIDANCE_RESULTS_DIR <- paste(OUT_DIR, "/guidance", sep="")
cmd <- paste(
  "set -e\n",
  "set -u\n",

  "done_time=", GUIDANCE_RESULTS_DIR, "-done\n",
  "if [ ! -f $done_time ] || [ ", MSA_FASTA, " -nt $done_time ] ",
  #" || [ ", script_path, " -nt $done_time ] ",
  " || [ ", NORMD_PER_SEQUENCE, " -nt $done_time ] ; then\n",
  "  rm ", GUIDANCE_RESULTS_DIR, "/* 2> /dev/null && true\n",
  "  export PATH=", MAFFT_PATH, ":$PATH\n",
  "  ", GUIDANCE_EXEC, " --msaProgram MAFFT --seqType aa",
  "  --seqFile ", PREPARED_FASTA_FILE_INPUT,
  "  --outDir ", GUIDANCE_RESULTS_DIR, 
  "  && touch ", GUIDANCE_RESULTS_DIR, "-done",
  "  && echo 'GUIDANCE finished'\n",
  "else\n", 
  "  echo 'Already done.'\n",
  "fi\n",
  sep="")
SH(cmd)

G_SCORES_FILE <- paste(GUIDANCE_RESULTS_DIR,
  "/MSA.MAFFT.Guidance_res_pair_seq.scr_with_Names", sep="")
G_SCORES <- read.table(G_SCORES_FILE, sep="\t", header=T)
# ALREADY AS HEADER #colnames(SCORES) <- c('SEQUENCE_NAME', 'SEQUENCE_SCORE')



# ==============================
if (OLD) { # Indentless 2
cat("\n")
cat("Merging the two score tables...\n")

# GUIDANCE keeps all words of the FASTA descriptor
# NorMD keeps only the first word
# Common denominator: first word only
splits <- strsplit(as.character(G_SCORES$SEQUENCE_NAME), ' ')
G_SCORES$SEQUENCE_NAME <- sapply(splits, function(x) x[[1]])


both <- merge(N_SCORES, G_SCORES, by="SEQUENCE_NAME")
names(both) <- c('seqid', 'n_scr', 'g_scr')

print(both)




cat("\n")
cat("Determining the cutoff...\n")


g_cutoffs <- c()
normd_cutoffs <- c()

for(sm in c("g_scr", "n_scr")) {

  # Sort by score (lowest scores on the bottom)
  both <- both[order(-both[,sm]),]

  ## Choose cutoffs
  cutoffs <- sapply(1:(nrow(both) - 1), function(i) {
    both[i,sm]/2 + both[i+1,sm]/2
  })
  cutoffs <- unique(cutoffs)

  # Running into one of these extreams should become
  # obvious, but we have them here to capture all possible cutoffs
  cutoffs <- c(max(both[,sm]) + 10, cutoffs, min(both[,sm]) - 10)

  if (sm == "g_scr") {
    g_cutoffs <<- cutoffs
  }

  if (sm == "n_scr") {
    normd_cutoffs <<- cutoffs
  }

} # Scoring  method



# Sort for easier bug hunting
both <- both[order(-both$n_scr),]

g_matt_best <- -2 # The worst theoretically possible is -1
n_matt_best_cutoff <- NA
g_matt_best_cutoff <- NA

# Lets take NorMD the ground truth
# but doing it the other way should be mathematically symmetrical
sapply(normd_cutoffs, function(normd_cutoff) {

  m_df <-
  sapply(g_cutoffs, function(g_cutoff) {
    # "True" positives
    predicted_positive <- both[both$g_scr > g_cutoff,]
    tp <- length(which(predicted_positive$n_scr > normd_cutoff))

    # "True" negatives
    predicted_negative <- both[both$g_scr < g_cutoff,]
    tn <- length(which(predicted_negative$n_scr < normd_cutoff))

    # "False" positives
    fp <- length(which(predicted_positive$n_scr < normd_cutoff))
    
    # "False" negatives
    fn <- length(which(predicted_negative$n_scr > normd_cutoff))

    # Historic 2011-09-19 used to be sqrt((tp+fp)*(tp+fn)*(tn+fp)*(tn*fn))
    m <- ((tp * tn) - (fp * fn)) / sqrt((tp+fp)*(tp+fn)*(tn+fp)*(tn+fn))

    # Order of these two matters
    m[fp == 0 & fn == 0] <- 2  # 2x best
    m[tp == 0 | tn == 0] <- -1 # worst
    m[-Inf] <- -1 # worst if fp*fn is greater than tp*tn

    #if (tp == 0 || tn == 0) m <- -1 # worst
    #if (fp == 0 && fn == 0) m <- 2  # 2x best

    list(counts=paste(tp,tn,fp,fn, sep="-"), matthews=m)
  })
  m_df <- as.data.frame(t(m_df))
  matthews_per_each_g_cutoff <- as.numeric(m_df$matthews)

  #print(g_cutoffs)
  matthews_per_each_g_cutoff[
   is.na(matthews_per_each_g_cutoff)] <- -2

  # Local
  max_matt <- max(matthews_per_each_g_cutoff)
  max_matt_g_cutoff <- 
    g_cutoffs[which(matthews_per_each_g_cutoff ==
    max_matt)]

  # Global
  if (max_matt >= g_matt_best[[1]]) {
    if (max_matt > g_matt_best[[1]]) {
      # Strictly better? Overwrites the current best-record!
      g_matt_best <<- max_matt
      n_matt_best_cutoff <<- normd_cutoff
      g_matt_best_cutoff <<- max_matt_g_cutoff
    } else {
      # Save all co-optimals

      # Do not add cuts that are on the extremes (untested, too rare)
      if (length(which(normd_cutoff < both$n_scr)) != 0 &&
          length(which(normd_cutoff > both$n_scr)) != 0 &&
          length(which(max_matt_g_cutoff > both$g_scr)) != 0 &&
          length(which(max_matt_g_cutoff < both$g_scr)) != 0) {

          g_matt_best <<- 
            c(g_matt_best, max_matt)
          n_matt_best_cutoff <<-
            c(n_matt_best_cutoff, normd_cutoff)
          g_matt_best_cutoff <<-
            c(g_matt_best_cutoff, max_matt_g_cutoff)
      }
    }
  }

  # ## ++++++++++ bug search / check +++++++++++++
  # print(both)
  # cat("NorMD cutoff", normd_cutoff, "\n")
  # print(as.numeric(m_df$matthews))
  # print(as.character(m_df$counts))
  # cat("Guidance M. best cutoff: ")
  # print(g_matt_best_cutoff)
  # cat("NorMD M. best cutoff: ")
  # print(n_matt_best_cutoff)
  # cat("+++++++++++++++++++++++++++++++++++++\n")

})




cat("Checking for co-optinal solutions...\n")
if (length(g_matt_best) > 1) {
  print("Co-optimal solution!")
  print(g_matt_best)
  print(g_matt_best_cutoff)
  print(n_matt_best_cutoff)

  # Precondition: there are no co-optimal cuts on the extremes
  closest_score <-
    sapply(n_matt_best_cutoff, function(i){
      # first one that's less
      both$n_scr[both$n_scr < i][[1]]
    })
  cut_gaps <- n_matt_best_cutoff - closest_score
  where_the_winner_is <- which(cut_gaps == max(cut_gaps))

  if (length(where_the_winner_is) != 1) {
    write("ERROR: Cannot descide among co-optimal solutions!\n",stderr())
    quit()
  }

  g_matt_best        <- g_matt_best[[where_the_winner_is]]
  g_matt_best_cutoff <- g_matt_best_cutoff[[where_the_winner_is]]
  n_matt_best_cutoff <- n_matt_best_cutoff[[where_the_winner_is]]
}

CUTOFF <- n_matt_best_cutoff

cat("NorMD Matthew's coefficient maximization Cutoff:\t", CUTOFF, "\n", sep="")


# ==============================
# Indentless 2 ends here
} else {
  print(G_SCORES)
  scores <- G_SCORES$SEQUENCE_SCORE
  scores <- scores - min(scores)
  scores <- scores / max(scores)

  both <- G_SCORES
  both[,"SEQUENCE_SCORE"] <- scores
  names(both)[names(both) == "SEQUENCE_SCORE"] <- "g_scr"
  CUTOFF <- 0.5
}


cat("\n")
cat("Removing badly aligned or unrelated sequences...\n")
BAD_SEQUENCES <- which(both[, 'g_scr'] < CUTOFF)

both[,'REMOVE?'] <- 'Keep'
both[BAD_SEQUENCES,'REMOVE?'] <- 'Remove'

results <- both[rev(order(both[,'g_scr'])),]
results_file <-
  paste(OUT_DIR, "/results.txt", sep="")

write.table(file=results_file, results, sep="\t")
print(results)

cat("Number of sequences removed:\t", length(BAD_SEQUENCES), "\n", sep="")
#warnings()
