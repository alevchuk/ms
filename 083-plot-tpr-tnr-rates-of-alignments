#!/usr/bin/env Rscript

# UNNAMED is a classifier of outlier sequences in multiple alignments
# Copyright (C) 2011  Aleksandr Levchuk
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


options(width=1000, max.print=500000)

# To run Bash commands
SH <- function(cmd){lines <- readLines(p <- pipe(cmd)); close(p); lines}

# Name of this script
script_path <- sub("--file=","", commandArgs()[grep("--file=", commandArgs())])
script_path_list <- strsplit(script_path, '/')[[1]]
script_name <- script_path_list[[length(script_path_list)]]

# Directory where this script is located
script_dir_list  <- script_path_list[1:(length(script_path_list)-1)]
script_dir  <- paste(script_dir_list, sep='/', collapse="/")

# Primary locations
EXPERIMENT_NAME <- SH("ls -1d ./trial-*/ | tail -1 | cut -d/ -f 2")
OUT_DIR <- paste(EXPERIMENT_NAME, "/", script_name, "-data-out", sep="")
UPSTREAM <- paste(EXPERIMENT_NAME, "/037-plot-matthews-max-data-out", sep="")
UPSTREAM2 <- paste(EXPERIMENT_NAME, "/029-collect-scores-data-out", sep="")
UPSTREAM3 <-
  paste(EXPERIMENT_NAME, "/039-boxplot-all-cutoffs-per-msa-data-out", sep="")




dir.create(OUT_DIR, showWarnings=FALSE)


usage_and_quit <- function() {
  cat(paste(script_name, " plots true positive/negative rates", "\n\n"))
  cat(paste("Usage:", script_name, "<sample-size>", "\n\n"))
  cat(paste(
    "Required Arguments",
    "  <sample-size> ",
    "",
    sep="\n"))
  quit()
}

# Check number of arguments
script_args <- commandArgs(trailingOnly=T)
if(length(script_args) == 0) usage_and_quit()
if(length(script_args) != 1) {
  cat("ERROR: Invalid number of arguments", length(script_args), "\n")
  usage_and_quit()
}

# Get arguments
SAMPLE_SIZE  <- script_args[[1]]


SCORE_FILES <- sapply(SH(paste(
  "ls ", UPSTREAM2, "/sample-size", SAMPLE_SIZE, "*-seq-scores", 
  " | ruby -ne '$_ =~ /(sample-size.*-id[0-9]+)/; puts \"#{$_.chomp}\t#{$1}\"'",
   sep="")), function(x) {
      strsplit(x, "\t")[[1]]
    }
)
SCORE_FILES <- t(SCORE_FILES)
rownames(SCORE_FILES) <- NULL
colnames(SCORE_FILES) <- c("filename", "sample_id")


STATIC_CUT_FILES <- sapply(SH(paste(
  "ls ", UPSTREAM3, "/sample-size", SAMPLE_SIZE, "*-static-cutoffs-tab",
  " | ruby -ne '$_ =~ /(sample-size.*-id[0-9]+)/; puts \"#{$_.chomp}\t#{$1}\"'",
   sep="")), function(x) {
      strsplit(x, "\t")[[1]]
    }
)
STATIC_CUT_FILES <- t(STATIC_CUT_FILES)
rownames(STATIC_CUT_FILES) <- NULL
colnames(STATIC_CUT_FILES) <- c("filename", "sample_id")
STATIC_CUT_FILES <- as.data.frame(STATIC_CUT_FILES)
#print(STATIC_CUT_FILES)
#q()

DYNAMIC_CUT_FILES <- sapply(SH(paste(
  "ls ", UPSTREAM, "/sample-size", SAMPLE_SIZE, "*-cutoffs",
  " | ruby -ne '$_ =~ /(sample-size.*-id[0-9]+)/; puts \"#{$_.chomp}\t#{$1}\"'",
  sep="")), function(x) {
      strsplit(x, "\t")[[1]]
    }
)
DYNAMIC_CUT_FILES <- t(DYNAMIC_CUT_FILES)
rownames(DYNAMIC_CUT_FILES) <- NULL
colnames(DYNAMIC_CUT_FILES) <- c("filename", "sample_id")
DYNAMIC_CUT_FILES <- as.data.frame(DYNAMIC_CUT_FILES)

# UPSTREAM3, "/sample-size100-id503-guidance_seq_scr-tab"
#"Rand"	"Mean"
#0.05	0.59276548
#0.1	0.52242936

###, header=T


UPSTREAM_SAMPLES <- merge(DYNAMIC_CUT_FILES, SCORE_FILES, by="sample_id")

# All samples get sample1's cut files
sample1_static_cuts_filename <- as.character(
                      subset(STATIC_CUT_FILES,
                         sample_id ==
                           paste("sample-size", SAMPLE_SIZE, "-id1", sep="")
                      )$filename
                    )

UPSTREAM_SAMPLES <- cbind(UPSTREAM_SAMPLES, sample1_static_cuts_filename)
#print(UPSTREAM_SAMPLES)
#q()

colnames(UPSTREAM_SAMPLES) <-
  c("sample_id", "dynamic_cut_file", "scores_file", "static_cut_file")

#print(UPSTREAM_SAMPLES)
#q()


library(ggplot2)

for (sample_i in 1:nrow(UPSTREAM_SAMPLES)) {
#for (sample_i in 6) {
  sample_id <- UPSTREAM_SAMPLES[sample_i, "sample_id"]
  dynamic_cut_file <-
    as.character(UPSTREAM_SAMPLES[sample_i, "dynamic_cut_file"])
  static_cut_file <-
    as.character(UPSTREAM_SAMPLES[sample_i, "static_cut_file"])
  scores_file <-
    as.character(UPSTREAM_SAMPLES[sample_i, "scores_file"])
  #print(dynamic_cut_file)
  #q()

  dynamic_cut_df <- read.table(dynamic_cut_file, header=F, sep = "\t")
  #print(dynamic_cut_df)
  #quit()
  #        V1      V2               V3       V4         V5
  # 1    0.05  0.0350 guidance_seq_scr Guidance  pfam11925
  names(dynamic_cut_df) <- c(
            "Injection_Type", "Chosen_Cutoff", "Scoring_Method",
            "Ground_Truth", "MSA")

  static_cut_df <- read.table(static_cut_file, header=T, sep = "\t")
  #    Rand          Mean               Method
  static_cut_df <- cbind(static_cut_df, list(Ground_Truth='Static'))
  names(static_cut_df) <- c(
            "Injection_Type", "Chosen_Cutoff", "Scoring_Method",
            "Ground_Truth")
  #print(static_cut_df)
  #quit()

  # Cross with the MSAs column
  static_cut_df_new <- data.frame()
  for(msa_name in unique(dynamic_cut_df$MSA))
    static_cut_df_new <-
      rbind(static_cut_df_new,
       cbind(static_cut_df, list(MSA=msa_name))
      )
  static_cut_df <- static_cut_df_new
  #print(static_cut_df)
  #quit()

  cuts_df <- rbind(static_cut_df, dynamic_cut_df)
  #print(cuts_df)
  #quit()


  scores_df <- read.table(scores_file)
  colnames(scores_df) <- c('scr', 'Injection_Type', 'unused', 'MSA',
                           'Scoring_Method', 'seqid')

  scores_df <- scores_df[,names(scores_df) != "unused"]

 
  main_df <- merge(cuts_df, scores_df, by=c("MSA",
                                            "Injection_Type",
                                            "Scoring_Method"))


  #print(cuts_df[1:10,])
  #print(scores_df[1:10,])
  #print(main_df)
  #quit()

  main_df <- cbind(main_df, list(Actual="Positive"))
  #q()

  main_df[,"Actual"] <- as.character(main_df[,"Actual"]) # not factor anymore
  main_df[grep("_RAND[0-9]", main_df$seqid),"Actual"] <- "Negative"

  print(c("cuts_df", "scores_df", "main_df"))
  print(dim(cuts_df))
  print(dim(scores_df))
  print(dim(main_df))

  #print(main_df[main_df$MSA == "COG0177" & main_df$Injection_Type == "0.05",])
  #quit()

  #print(cuts_df)
  #q()


  ## Data that will be derived by this script
  cuts_df <- cbind(cuts_df, list(TPR=NaN), list(TNR=NaN))
  #q()


  for(scoring_method in unique(main_df$Scoring_Method)) {
  local({
  main_df <- main_df[main_df$Scoring_Method == scoring_method,]

  for(rand in unique(main_df$Injection_Type)) {
  local({
  main_df <- main_df[main_df$Injection_Type == rand,]

  for(msa in unique(main_df$MSA)) {
  local({
  main_df <- main_df[main_df$MSA == msa,]

  for(truth in unique(main_df$Ground_Truth)) {
  local({
    main_df <- main_df[main_df$Ground_Truth == truth,]
 
    #print(main_df) 

    # Determine the operations
    main_df <- cbind(main_df, list(Operation="Keep"))
    main_df$Operation <- as.character(main_df$Operation)
    main_df[main_df$scr < main_df$Chosen_Cutoff, "Operation"] <- "Remove"

    postives  <- main_df$Actual == "Positive"
    negatives <- main_df$Actual == "Negative"
    keeps     <- main_df$Operation == "Keep"
    removals  <- main_df$Operation == "Remove"

    tp <- length(which(keeps    & postives  ))
    tn <- length(which(removals & negatives ))
    fp <- length(which(keeps    & negatives ))
    fn <- length(which(removals & postives  ))

    #cat("\n\n\n") 
    #cat("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n")
    #print(c(rand, msa, truth))
    #options(width=1000, max.print=500000)
    #print(main_df)


    print(c("tp:", tp))
    print(c("tn:", tn))
    print(c("fp:", fp))
    print(c("fn:", fn))

    TPR <- tp / (tp + fn) 
    TNR <- tn / (tn + fp)  # = 1 - FPR
    print(c("TPR:", TPR))
    print(c("TNR:", TNR))

    cuts_df[
      cuts_df$Scoring_Method == scoring_method &
      cuts_df$MSA == msa &
      cuts_df$Ground_Truth == truth &
      cuts_df$Injection_Type == rand, c("TPR", "TNR")] <<- c(TPR, TNR)

    #options(width=1000)
    #print(cuts_df)
    #q()

    #cuts_df_here[, "TPR"] <<- TPR
    #cuts_df_here[, "TNR"] <<- TNR

    #cat("\n\n\n") 
    #cat("-------------------------------------\n")
    #print(cuts_df_here)



  # Closing: Ground_Truth, MSA, Rand, and Scoring_Method
  })
  }

  })
  }

  })
  }

  })
  }


  #cat("\n\n\n") 
  #cat("-------------------------------------\n")
  #print(cuts_df)


  for(truth in unique(main_df$Ground_Truth)) {
  local({
    cuts_df <- subset(cuts_df, Ground_Truth == truth)


    ## Bug fix/hack for histogram, otherwise 0s will not show up
    #print(cuts_df)
    #print(str(cuts_df[1,]))
    #print(cuts_df$TPR == 0)
    #q()
    cuts_df[cuts_df$TPR == 0, "TPR"] <- 0.0001
    cuts_df[cuts_df$TNR == 0, "TNR"] <- 0.0001
    #q()


    png(paste(OUT_DIR, "/", sample_id, "-", truth, "-tp-rates.png", sep=""),
      width=1000, height=1000,
      type="cairo")

    g <- ggplot(cuts_df) +

      opts(
        axis.title.x =  theme_blank(),
        title="True Positive/Negative Rates"
      ) +
      #geom_histogram(binwidth=0.01) +

      geom_histogram(aes(x=TPR),
        fill="red", alpha = 0.7, binwidth=0.01) + 

      geom_histogram(aes(x=TNR),
        fill="blue", alpha = 0.4, binwidth=0.01) +

      scale_x_continuous(limits=c(0, 1)) +

      facet_grid(Injection_Type ~ Scoring_Method)

      # For a standard scaling, insert an invisible column at 1.0
      if (any(grep("50[0-9]", sample_id))) {
        g <- g + geom_histogram(data=data.frame(x=rep(1.0, 25)), aes(x=x),
          fill="gray", alpha = 0.0, binwidth=0.01)
      } else {
        g <- g + geom_histogram(data=data.frame(x=rep(1.0, 100)), aes(x=x),
          fill="gray", alpha = 0.0, binwidth=0.01)
      }
     

    print(g)
    dev.off() 

    #png(paste(OUT_DIR, "/", sample_id, "-", truth, "-tn-rates.png", sep=""),
    #  width=1000, height=1000,
    #  type="cairo")

    #g <- ggplot(cuts_df, aes(x=TNR)) +
    #  geom_histogram(binwidth=0.01) +
    #  scale_y_continuous(limits=c(0, 101)) +
    #  scale_x_continuous(limits=c(0, 1)) +
    #  #facet_grid(Injection_Type ~ Ground_Truth)
    #  facet_grid(Injection_Type ~ Scoring_Method)
    #print(g)
    #dev.off() 
  })
  }


}
