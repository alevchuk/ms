#!/usr/bin/env Rscript

# UNNAMED is a classifier of outlier sequences in multiple alignments
# Copyright (C) 2011  Aleksandr Levchuk
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# To run Bash commands
SH <- function(cmd){lines <- readLines(p <- pipe(cmd)); close(p); lines}

# Name of this script
script_path <- sub("--file=","", commandArgs()[grep("--file=", commandArgs())])
script_path_list <- strsplit(script_path, '/')[[1]]
script_name <- script_path_list[[length(script_path_list)]]

# Directory where this script is located
script_dir_list  <- script_path_list[1:(length(script_path_list)-1)]
script_dir  <- paste(script_dir_list, sep='/', collapse="/")

# Primary locations
EXPERIMENT_NAME <- SH("ls -1d ./trial-*/ | tail -1 | cut -d/ -f 2")
OUT_DIR <- paste(EXPERIMENT_NAME, "/", script_name, "-data-out", sep="")
UPSTREAM <- paste(EXPERIMENT_NAME, "/037-plot-matthews-max-data-out", sep="")
UPSTREAM2 <- paste(EXPERIMENT_NAME, "/029-collect-scores-data-out", sep="")

dir.create(OUT_DIR, showWarnings=FALSE)



# TODO: Sample size from command line
SAMPLE_SIZE <- 100

SAMPLES <-
  SH(paste("ls ", UPSTREAM, "/sample-size", SAMPLE_SIZE, "-id*-cutoffs", sep=""))

SAMPLE_SCR_FILES <- SH(paste(
  "ls ", UPSTREAM2, "/sample-size", SAMPLE_SIZE, "*-seq-scores", sep=""))



UPSTREAM_SAMPLES <- cbind(SAMPLES[1:3], SAMPLE_SCR_FILES[1:3])
colnames(UPSTREAM_SAMPLES) <- c("cutoffs_file", "scores_file")

print(UPSTREAM_SAMPLES)



library(ggplot2)


for (sample_i in 1:nrow(UPSTREAM_SAMPLES)) {

  sample_df <- read.table(UPSTREAM_SAMPLES[sample_i, "cutoffs_file"])
  names(sample_df) <- c("MSA",
            "Injection_Type", "Max_Matt_Cutoff", "Scoring_Method", "Ground_Truth")
  sample_df <- sample_df[sample_df$Scoring_Method == "normd_dx_mod_seq_scr",]
  sample_df <- sample_df[,names(sample_df) != "Scoring_Method"]

  scores_df <- read.table(UPSTREAM_SAMPLES[sample_i, "scores_file"])
  colnames(scores_df) <- c('scr', 'Injection_Type', 'unused', 'MSA', 'method',
                           'seqid')

  scores_df <- scores_df[scores_df$method == "normd_dx_mod_seq_scr",]
  scores_df <- scores_df[,names(scores_df) != "unused"]
  scores_df <- scores_df[,names(scores_df) != "method"]

 
  main_df <- merge(sample_df, scores_df, by=c("MSA", "Injection_Type"))

  main_df <- cbind(main_df, list(Actual="Positive"))

  main_df[,"Actual"] <- as.character(main_df[,"Actual"]) # not factor anymore
  main_df[grep("_RAND[0-9]", main_df$seqid),"Actual"] <- "Negative"

  print(c("sample_df", "scores_df", "main_df"))
  print(dim(sample_df))
  print(dim(scores_df))
  print(dim(main_df))

  #options(width=1000, max.print=500000)
  #print(main_df[main_df$MSA == "COG0177" & main_df$Injection_Type == "0.05",])
  #quit()




  ## Data that will be derived by this script
  sample_df <- cbind(sample_df, list(TPR=NaN), list(TNR=NaN))



  for(rand in unique(main_df$Injection_Type)) {
  local({
    main_df <- main_df[main_df$Injection_Type == rand,]

    for(msa in unique(main_df$MSA)) {
    local({
      main_df <- main_df[main_df$MSA == msa,]

      for(truth in unique(main_df$Ground_Truth)) {
      local({
        main_df <- main_df[main_df$Ground_Truth == truth,]
  

        # Determine the operations
        main_df <- cbind(main_df, list(Operation="Keep"))
        main_df$Operation <- as.character(main_df$Operation) # not a factor anymore
        main_df[main_df$scr < main_df$Max_Matt_Cutoff, "Operation"] <- "Remove"

        postives  <- main_df$Actual == "Positive"
        negatives <- main_df$Actual == "Negative"
        keeps     <- main_df$Operation == "Keep"
        removals  <- main_df$Operation == "Remove"

        tp <- length(which(keeps    & postives  ))
        tn <- length(which(removals & negatives ))
        fp <- length(which(keeps    & negatives ))
        fn <- length(which(removals & postives  ))

        #cat("\n\n\n") 
        #cat("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n")
        #print(c(rand, msa, truth))
        #options(width=1000, max.print=500000)
        #print(main_df)


        print(c("tp:", tp))
        print(c("tn:", tn))
        print(c("fp:", fp))
        print(c("fn:", fn))

        TPR <- tp / (tp + fn) 
        TNR <- tn / (tn + fp)  # = 1 - FPR
        print(c("TPR:", TPR))
        print(c("TNR:", TNR))

        sample_df[
          sample_df$MSA == msa &
          sample_df$Ground_Truth == truth &
          sample_df$Injection_Type == rand, c("TPR", "TNR")] <<- c(TPR, TNR)

        #sample_df_here[, "TPR"] <<- TPR
        #sample_df_here[, "TNR"] <<- TNR

        #cat("\n\n\n") 
        #cat("-------------------------------------\n")
        #print(sample_df_here)

      })
      } # Ground_Truth
    })
    } # MSA
  })
  } # Rand


  cat("\n\n\n") 
  cat("-------------------------------------\n")
  print(sample_df)


  ## Bug fix/hack for histogram, otherwise 0s will not show up
  sample_df[sample_df$TPR == 0] <- 0.0001
  sample_df[sample_df$TNR == 0] <- 0.0001



  png(paste(OUT_DIR, "/sample-", sample_i, "-tp-rates.png", sep=""),
    width=1000, height=1000,
    type="cairo")

  g <- ggplot(sample_df, aes(x=TPR)) +
    geom_histogram(binwidth=0.01) + xlim(0,1) +
    facet_grid(Injection_Type ~ Ground_Truth)
  print(g)
  dev.off() 



  png(paste(OUT_DIR, "/sample-", sample_i, "-tn-rates.png", sep=""),
    width=1000, height=1000,
    type="cairo")

  g <- ggplot(sample_df, aes(x=TNR)) +
    geom_histogram(binwidth=0.01) + xlim(0,1) +
    facet_grid(Injection_Type ~ Ground_Truth)
  print(g)
  dev.off() 

}
