#!/bin/bash

# UNNAMED is a classifier of outlier sequences in multiple alignments
# Copyright (C) 2011  Aleksandr Levchuk
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# Tags: very-slow

# NOTE: msa-list-filtered is the authoritative file,
#   everything else may not be filtered.

set -e
set -u

source ./api/pipeline.sh


CONVERT_FASTA_TO_TAB=./opt/misc-bioinfo-scripts/convert-fasta-to-tab

MIN_MSA_NUMSEQ=19
MAX_MSA_RESIDUES=100000 # 100k

EXPERIMENT_NAME=$(ls -1d ./trial-*/ | tail -1 | cut -d/ -f 2)
DATA_IN_EXTRACTED="./$EXPERIMENT_NAME/002-start-data-out/cdd-extracted"
DATA_OUT="./$EXPERIMENT_NAME/$0-data-out"

mkdir -p $DATA_OUT 2> /dev/null && true


function callback {
    mkdir -p $DATA_OUT/all-alignments-tab{,-new} 2> /dev/null && true
    
    ls $DATA_IN_EXTRACTED | 
      while read i; do
        cat $DATA_IN_EXTRACTED/$i |
          $CONVERT_FASTA_TO_TAB |
          egrep -v "^lcl|consensus" |   # Filter out consensus sequences
          cat > $DATA_OUT/all-alignments-tab-new/$i.tab
      done
    rm -rf $DATA_OUT/all-alignments-tab
    mv $DATA_OUT/all-alignments-tab{-new,}
}
parrent_done_time_prefix=$DATA_IN_EXTRACTED
done_time_prefix=$DATA_OUT/all-alignments-tab
pipeline   $parrent_done_time_prefix   $done_time_prefix \
  "Doing reshape from $DATA_IN_EXTRACTED to $DATA_OUT/all-alignments-tab" \
  callback # 14 min




function callback {
  echo "Generating the unfiltered msa-list"
  ls -1 $DATA_OUT/all-alignments-tab/ > $DATA_OUT/msa-list-new
  mv $DATA_OUT/msa-list{-new,}

  echo "Counting numbers of sequences in the unfiltered msa-list"
  cat $DATA_OUT/msa-list |
    while read i; do
      cat $DATA_OUT/all-alignments-tab/$i | wc -l | tr "\n" "\t"
      echo $i
    done > $DATA_OUT/msa-sizes-numseq-new
  mv $DATA_OUT/msa-sizes-numseq-new $DATA_OUT/msa-sizes-numseq
}
parrent_done_time_prefix=$done_time_prefix
done_time_prefix=$DATA_OUT/msa-sizes-numseq
pipeline   $parrent_done_time_prefix   $done_time_prefix \
  "Getting msa-{list,sizes-numseq} of $DATA_OUT/all-alignments-tab" \
  callback # 5m




function callback {
  echo "Selecting MSAs that have at least $MIN_MSA_NUMSEQ sequences."
  sort -n  $DATA_OUT/msa-sizes-numseq  | 
  awk "\$1 >= $MIN_MSA_NUMSEQ" | # MSAs smaller than  MIN_MSA_NUMSEQ
  awk "{print \$2 \"\\t\" \$1}" > $DATA_OUT/msa-list-with-numseq-filtered-new
  mv $DATA_OUT/msa-list-with-numseq-filtered{-new,}

  echo "Counting residues in the selected MSAs and"
  echo " selecting only the ones that have no more than"
  echo " $MAX_MSA_RESIDUES residues."
  cat $DATA_OUT/msa-list-with-numseq-filtered |
    while read i; do
      msa_name=$(echo -e "$i" | cut -f1)
      msa_length=$(cat "$DATA_OUT/all-alignments-tab/$msa_name" |
        cut -f2 | tr -d "\n-" | wc -c)

      [ $msa_length -le $MAX_MSA_RESIDUES ] && echo -e "$i\t$msa_length"
    done > \
    $DATA_OUT/msa-list-with-numseq-and-length-filtered-new
  mv $DATA_OUT/msa-list-with-numseq-and-length-filtered{-new,}

  rm $DATA_OUT/msa-list-with-numseq-filtered*
  mv $DATA_OUT/msa-list-with-numseq-and-length-filtered \
    $DATA_OUT/msa-list-filtered
  mv $DATA_OUT/msa-list-with-numseq-and-length-filtered-done \
    $DATA_OUT/msa-list-filtered-done

}
parrent_done_time_prefix=$done_time_prefix
done_time_prefix=$DATA_OUT/msa-list-with-numseq-and-length-filtered
pipeline   $parrent_done_time_prefix   $done_time_prefix \
  "MSAs with >= $MIN_MSA_NUMSEQ sequences and <= $MAX_MSA_RESIDUES residues" \
  callback # ?h
