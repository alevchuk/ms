#!/bin/bash

# UNNAMED is a classifier of outlier sequences in multiple alignments
# Copyright (C) 2011  Aleksandr Levchuk
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# Tags: 
set -e
set -u
source ./api/pipeline.sh


if [ $# != 1 ] && [ $# != 2 ]; then
  echo "Usage: $0 <sample-size>  [-s]" >&2
  echo "" >&2
  echo "  <sample-size>        how many alignments should be in 1 sample" >&2
  echo "" >&2
  echo "  -f                   force always runing, never skip any steps" >&2
  exit 1
fi

# Arguments
SAMPLE_SIZE=$1                              # sample size (mandatory)
set +u
[ "$2" == '-f' ] && export ALWAYS_RUN=true  # skip steps (optional)
[ -n "$2" ] && [ "$2" != '-f' ] && (echo "Invalid option $3"; exit 1)
set -u


EXPERIMENT_NAME=$(ls -1d ./trial-*/ | tail -1 | cut -d/ -f 2)
GUIDANCE_UPSTREAM_DIR="./$EXPERIMENT_NAME/010-run-guidance-data-out"
NORMD_UPSTREAM_DIR="./$EXPERIMENT_NAME/026-run-normd-data-out"
BLAST_UPSTREAM_DIR="./$EXPERIMENT_NAME/028-run-blast-data-out"

DATA_OUT="$EXPERIMENT_NAME/$0-data-out"


rm -rf $DATA_OUT-new # Danger Zone
mkdir -p $DATA_OUT-new 2> /dev/null && true


function callback {
  ##
  ## GUIDANCE Whole MSA scores
  ##
  #sample_portion="sample-size$SAMPLE_SIZE*-nogaps"
  #MSA_SCORE_FILES=`echo \
  #  $GUIDANCE_UPSTREAM_DIR/$sample_portion/*/MSA.MAFFT.Guidance_msa.scr |
  #  tr " " "\n"`
  #
  ## If these files exists then *'s will expand
  #if [[ $MSA_SCORE_FILES =~ \* ]]; then
  #  echo "$0: ERROR: Could not find score files $MSA_SCORE_FILES" >&2
  #  echo "Did you run the tasks generated by 010-run-guidance?" >&2
  #  exit 1
  #fi
  #
  #grep "MEAN_RES_PAIR_SCORE" $MSA_SCORE_FILES | while read line; do

  #  #./trial-cdd-2011-08-v2.31-uniprot-2011-08/
  #  #010-run-guidance-data-out/sample-size100-id1-list-tab-nogaps/
  #  # [           sample-size100-id3-list-tab-rand0.05-tab-nogaps  ]
  #  #COG0081.FASTA.tab-fasta.txt/
  #  #MSA.MAFFT.Guidance_msa.scr:#MEAN_RES_PAIR_SCORE
  #  #0.892144  #MEAN_COL_SCORE 0.330662
 
  #  sample=$(expr "$line" : '.*\(sample-size.*-id.*\)-list') || (
  #    echo "error: could not parse out rand in \"$line\""; exit 1)

  #  rand=$(expr "$line" : '.*sample-size.*-id.*-lis\(.*\)-tab-nogaps') || (
  #    echo "error: could not parse out rand in \"$line\""; exit 1)
  #  if [ "$rand" == "t" ]; then
  #    rand="0.00"
  #  else
  #    rand=$(expr "$rand" : 't-tab-rand\(.*\)') || (
  #      echo "error: could not parse out rand in \"$line\""; exit 1)
  #  fi

  #  msa=$(expr "$line" : '.*sample-.*-nogaps/\(.*\).FASTA.tab') || (
  #    echo "ERROR: Could not parse out msa in \"$line\""; exit 1)
  #
  #  score=$(expr "$line" : '.*MEAN_RES_PAIR_SCORE \([^ ]*\).*') || (
  #    echo "ERROR: Could not parse out score in \"$line\""; exit 1)
 
  #  # SCORE RAND_AMMOUNT UNUSED MSA METHOD
  #  echo -e "$score\t$rand\t-\t$msa\tguidance_mean_res_pair_msa" \
  #    >> $DATA_OUT-new/$sample-whole-msa-scores
  #
  #done
 
 
  ##
  ## NorMD whole MSA scores
  ##
  #find $NORMD_UPSTREAM_DIR | grep "whole-msa-score$" |
  #while read line; do
  #  # trial-cdd-2011-08-v2.31-uniprot-2011-08/026-run-normd-data-out/
  #  # sample-size100-id5-list-tab-rand0.50-tab-pfam04267.FASTA.tab/
  #  # whole-msa-score 

  #  sample=$(expr "$line" : '.*\(sample-size[0-9]*-.*\)-list-tab') || (
  #    echo "ERROR: Could not parse out sample in \"$line\""; exit 1)

  #  rand=$(expr "$line" : '.*sample-size.*-id.*-lis\(.*\)-tab') || (
  #    echo "error: could not parse out rand in \"$line\""; exit 1)
  #  if [ "$rand" == "t" ]; then
  #    rand="0.00"
  #  else
  #    rand=$(expr "$rand" : 't-tab-rand\(.*\)') || (
  #      echo "error: could not parse out rand in \"$line\""; exit 1)
  #  fi

  #  msa=$(expr "$line" : '.*-tab-\([^.]*\).FASTA.tab') || (
  #    echo "ERROR: Could not parse out msa in \"$line\""; exit 1)

  #  score=$(cat $line)

  #  # SCORE RAND_AMMOUNT UNUSED MSA METHOD
  #  echo -e "$score\t$rand\t-\t$msa\tnormd_dx_mod_msa" >> \
  #    $DATA_OUT-new/$sample-whole-msa-scores  # Add to the same file as GUID..

  #done




  #
  # BLAST scores
  #

  find $BLAST_UPSTREAM_DIR -name *-fasta-m8-scores |
  # trial-cdd-2011-08-v2.31-uniprot-2011-08/
  #028-run-blast-data-out/
  #sample-size100-id503-list-tab-rand0.25-tab-ID50_pfam11445.FASTA.tab-
  #blastable-fasta-m8-scores
  ruby -e '
    open_out_files = {}
    while line = STDIN.gets

      line =~ /(sample-size.*-id.*)-list/ ?
        (sample = $1) : (raise "Could not parse sample out of #{line}")

      line =~ /sample-.*tab-([^-]+).FASTA.tab/ ?
        (msa = $1) : (raise "Could not parse msa out of #{line}")

      if line =~ /sample-size.*-rand([^-]*)-/
        rand = $1
      elsif line =~ /sample-size.*-list-tab-#{msa}/
        rand = "0.00"
      else
        raise "Could not parse rand out of #{line}"
      end

      out_file_name = "#{ARGV[0]}/#{sample}-seq-scores"

      ## Testing / Debugging
      #p [sample, msa, rand, out_file_name]

      # Do not Append
      open_out_files[out_file_name] = File.open(out_file_name, "w") unless 
        open_out_files.keys.include? out_file_name

      in_file_name = line.chomp
      File.open(in_file_name) do |f|
        f.each do |line|
          seq, score = line.chomp.split("\t")
          seq.gsub! "\"" "" # Remve quotes if any

          open_out_files[out_file_name].puts \
            [score,rand,"-",msa,"blast",seq].join("\t")
        end
      end
    end
  ' $DATA_OUT-new


 
  #
  # GUIDANCE Per-sequence scores
  #
  sample_portion="sample-size$SAMPLE_SIZE*-nogaps"
  end_portion="*/MSA.MAFFT.Guidance_res_pair_seq.scr_with_Names"
  SEQ_SCORE_FILES=`echo \
   $GUIDANCE_UPSTREAM_DIR/$sample_portion/$end_portion |
   tr " " "\n"`
  
  # If these files exists then *'s will expand
  if [[ $SEQ_SCORE_FILES =~ \* ]]; then
    echo "$0: ERROR: Could not find score files $SEQ_SCORE_FILES" >&2
    echo "Did you run the tasks generated by 010-run-guidance?" >&2
    exit 1
  fi
  
  #./trial-cdd-2011-08-v2.31-uniprot-2011-08/010-run-guidance-data-out/
  #sample-size100-id1-list-tab-nogaps/COG0081.FASTA.tab-fasta.txt/
  #MSA.MAFFT.Guidance_res_pair_seq.scr_with_Names:gi|6320321	0.735626
  egrep -v "^#END$" $SEQ_SCORE_FILES | grep -v "SEQUENCE_NAME" | \
  ruby -e '
    open_out_files = {}
    while line = STDIN.gets

      line =~ /(sample-size.*-id.*)-list/ ?
        (sample = $1) : (raise "Could not parse sample out of #{line}")

      line =~ /sample-.*\/([^\/]+).FASTA.tab/ ?
        (msa = $1) : (raise "Could not parse msa out of #{line}")

      if line =~ /sample-size.*-rand([^-]*)-/
        rand = $1
      elsif line =~ /sample-size.*-list-tab-nogaps\/#{msa}/
        rand = "0.00"
      else
        raise "Could not parse rand out of #{line}"
      end

      if line =~ /_seq.scr_with_Names:(.*)\t(.*)/
        seq,score = $1,$2
      else
        raise "Could not parse seq and score out of #{line}"
      end
    
      file_name = "#{ARGV[0]}/#{sample}-seq-scores"

      # Append because BLAST scores are already there
      open_out_files[file_name] = File.open(file_name, "a") unless 
        open_out_files.keys.include? file_name

      open_out_files[file_name].puts \
        [score,rand,"-",msa,"guidance_seq_scr",seq].join("\t")
    end
  ' $DATA_OUT-new



  #
  # NorMD Per sequence scores
  #
  find $NORMD_UPSTREAM_DIR | grep "per-seq-scores-normd-dx1-mod$" |
  # trial-cdd-2011-08-v2.31-uniprot-2011-08/026-run-normd-data-out/
  # sample-size100-id5-list-tab-rand0.50-tab-pfam04267.FASTA.tab/
  # per-seq-scores-normd-dx1-mod
  ruby -e '
    open_out_files = {}
    while line = STDIN.gets

      line =~ /(sample-size.*-id.*)-list/ ?
        (sample = $1) : (raise "Could not parse sample out of #{line}")

      line =~ /sample-.*tab-([^-]+).FASTA.tab/ ?
        (msa = $1) : (raise "Could not parse msa out of #{line}")

      if line =~ /sample-size.*-rand([^-]*)-/
        rand = $1
      elsif line =~ /sample-size.*-list-tab-#{msa}/
        rand = "0.00"
      else
        raise "Could not parse rand out of #{line}"
      end

      out_file_name = "#{ARGV[0]}/#{sample}-seq-scores"

      # Append because GUIDANCE scores are already there
      open_out_files[out_file_name] = File.open(out_file_name, "a") unless 
        open_out_files.keys.include? out_file_name

      in_file_name = line.chomp
      File.open(in_file_name) do |f|
        f.each do |line|
          seq, score = line.chomp.split("\t")

          open_out_files[out_file_name].puts \
            [score,rand,"-",msa,"normd_dx_mod_seq_scr",seq].join("\t")
        end
      end
    end
  ' $DATA_OUT-new


   
  #
  # Finalize
  #
  
  # Danger Zone
  rm -rf $DATA_OUT
  
  # Commit
  mv $DATA_OUT{-new,}
}

# Pick the latest done file
upstream_done_time_prefix=$(
  ls -t $GUIDANCE_UPSTREAM_DIR/sample-size$SAMPLE_SIZE-id*-list-tab-nogaps/*-done |
    head -n 1 | sed 's/-done$//'
)
done_time_prefix=$DATA_OUT
pipeline   $upstream_done_time_prefix   $done_time_prefix \
  "Extract all per-msa and per-seq scores for all methods" \
  callback


# Print accounting
./$0-scripts/accounting.R $SAMPLE_SIZE
