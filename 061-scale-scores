#!/usr/bin/env Rscript

# GROUPBALANCER is a classifier of outlier sequences in multiple alignments
# Copyright (C) 2011  Aleksandr Levchuk
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# To run Bash commands
SH <- function(cmd){lines <- readLines(p <- pipe(cmd)); close(p); lines}

# Name of this script
script_path <- sub("--file=","", commandArgs()[grep("--file=", commandArgs())])
script_path_list <- strsplit(script_path, '/')[[1]]
script_name <- script_path_list[[length(script_path_list)]]

# Directory where this script is located
script_dir_list  <- script_path_list[1:(length(script_path_list)-1)]
script_dir  <- paste(script_dir_list, sep='/', collapse="/")

# Primary locations
EXPERIMENT_NAME <- SH("ls -1d ./trial-*/ | tail -1 | cut -d/ -f 2")
OUT_DIR <- paste(EXPERIMENT_NAME, "/", script_name, "-data-out", sep="")
dir.create(OUT_DIR, showWarnings=F)


UPSTREAM1 <- paste(EXPERIMENT_NAME, "/029-collect-scores-data-out", sep="")


# How to use this script
usage_and_quit <- function() {
  cat(paste(script_name, " Scales scores to the range of each MSA", "\n\n"))
  cat(paste("Usage:", script_name, "<sample-size>", "\n\n"))
  cat(paste(
    "Required Arguments",
    "  <sample-size>  Sample size",
    "",
    sep="\n"))
  quit()
}

# Check number of arguments
script_args <- commandArgs(trailingOnly=T)
if(length(script_args) == 0) usage_and_quit()
if(length(script_args) != 1) {
  cat("ERROR: Invalid number of arguments", length(script_args), "\n")
  usage_and_quit()
}

SAMPLE_SIZE <- script_args[[1]]

SCORES_SAMPLE_FILES <- sapply(SH(paste(
  "ls ", UPSTREAM1, "/sample-size", SAMPLE_SIZE, "*-seq-scores",
  " | ruby -ne '$_ =~ /(sample-size.*-id[0-9]+)/; puts \"#{$_.chomp}\t#{$1}\"'",
  sep="")), function(x) {
      strsplit(x, "\t")[[1]]
    }
)

SCORES_SAMPLE_FILES <-
  data.frame(scores_filename=SCORES_SAMPLE_FILES[1,],
  sample_id=SCORES_SAMPLE_FILES[2,], stringsAsFactors=F)
rownames(SCORES_SAMPLE_FILES) <- c()


SAMPLES_DF <- SCORES_SAMPLE_FILES

options(width=1000)

#print(SAMPLES_DF)
#q()

library(ggplot2)



# Itterate over every sample
for (sample_id in SAMPLES_DF$sample_id) {
  scores_filename <-
    SAMPLES_DF[SAMPLES_DF$sample_id==sample_id,]$scores_filename

  print(sample_id)
  print(scores_filename)

  scores_df <-
    read.table(SAMPLES_DF[SAMPLES_DF$sample_id==sample_id,"scores_filename"])
  names(scores_df) <- c('scr', 'rand', 'unused', 'msa', 'scr_method', 'seqid')
  # E.g.: 9.388270e-01 0.00 - COG0177 guidance_seq_scr gi|1311214|pdb|2ABK|
  # Methods: guidance_seq_scr normd_dx_mod_seq_scr


  outfile <- paste(OUT_DIR, "/", sample_id, "-scaled-scores-tab", sep="")
  outfile_connection <- file(outfile, 'w')


  for (msa in unique(scores_df$msa)) {
  local({
    print(msa)

    scores_df <- scores_df[scores_df$msa==msa,]
    #quit()

    #print(grep("^guidance", scores_df$scr_method))
    #quit()

    #print(n_scores)
    #cat("\n")

    #gg_df <- data.frame()

    for (rand in unique(scores_df$rand)) {
    local({
      #print(rand)

      scores_df <- scores_df[scores_df$rand==rand,]

      n_scores <- sort(scores_df[grep("^normd", scores_df$scr_method), 'scr'])
      g_scores <-
        sort(scores_df[grep("^guidance", scores_df$scr_method), 'scr'])

      ###print(n_scores)
      ###cat("\n")

      for (m in unique(scores_df$scr_method)) {
        scores <- scores_df[scores_df$scr_method == m, 'scr']
        
        # to 0..1
        min1 <- min(scores)
        scores <- scores - min1

        max1 <- max(scores)
        if(max1 != 0) { # If all the scores are same
          scores <- scores / max1
        }

        scores_df[scores_df$scr_method == m, 'scr'] <- scores
      } 

      write.table(file=outfile_connection, scores_df,
        sep="\t", row.names=F, col.names=F, append=T)
    })
    }



  })
  }

  close(outfile_connection)


}
