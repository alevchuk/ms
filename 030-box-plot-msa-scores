#!/usr/bin/env Rscript

# UNNAMED is a classifier of outlier sequences in multiple alignments
# Copyright (C) 2011  Aleksandr Levchuk
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

sh <- function(cmd){lines <- readLines(p <- pipe(cmd)); close(p); lines}

EXPERIMENT_NAME <- sh("ls -1d ./trial-*/ | tail -1 | cut -d/ -f 2")

# Name of this script
script_path <- sub("--file=","", commandArgs()[grep("--file=", commandArgs())])
script_path_list <- strsplit(script_path, '/')[[1]]
script_name <- script_path_list[[length(script_path_list)]]

# Directory where this script is located
script_dir_list  <- script_path_list[1:(length(script_path_list)-1)]
script_dir  <- paste(script_dir_list, sep='/', collapse="/")

# How to use this script
usage_and_quit <- function() {
  cat(paste(script_name, " plots box plots per msa", "\n\n"))
  cat(paste("Usage:", script_name, "<sample-size>", "\n\n"))
  cat(paste(
    "Required Arguments",
    "  <sample-size> ",
    "",
    sep="\n"))
  quit()
}

# Check number of arguments
script_args <- commandArgs(trailingOnly=T)
if(length(script_args) == 0) usage_and_quit()
if(length(script_args) != 1) {
  cat("ERROR: Invalid number of arguments", length(script_args), "\n")
  usage_and_quit()
}

# Get arguments
SAMPLE_SIZE  <- script_args[[1]]

MAIN_DF <- data.frame()

UPSTREAM_DIR <- paste(EXPERIMENT_NAME, "029-collect-scores-data-out", sep="/")
OUT_DIR <- paste(EXPERIMENT_NAME, script_name, sep="/")

# 029-collect-scores-data-out/sample-size100-id1-whole-msa-scores
sample_list <- sh(sprintf("ls %s/sample-size%s-*-whole-msa-scores",
  UPSTREAM_DIR, SAMPLE_SIZE))

sample_number <- 0
for(sample_file in sample_list) {
  sample_number <- sample_number + 1

  MAIN_DF <- read.table(sample_file,
    col.names=c("score", "rand", "unused_column", "msa", "method"))
  MAIN_DF[,"unused_column"] <- NULL

  # Convert rand ratios to numeric
  MAIN_DF[,"rand"] <- sapply(MAIN_DF[,"rand"], function(str) {
      str <- as.character(str)
      if (str == "no_injection") {
        0
      } else {
        as.numeric(paste(strsplit(str, "")[[1]][5:8], sep="", collapse=""))
      }
    })

  dir.create(OUT_DIR, showWarnings=F)
  sh(sprintf("cp %s-scripts/*html %s", script_name, OUT_DIR))


  methods <- unique(MAIN_DF[,"method"])
  lapply(methods, function(method) {
    random_ratios <- unique(MAIN_DF[,"rand"])
    random_ratios <- random_ratios[order(random_ratios)]

    all_scores <-
    lapply(random_ratios, function(random_ratio) {
      subset_df <- MAIN_DF[MAIN_DF[,"rand"] == random_ratio, ]
      scores <- subset_df[,"score"]

      #dropped_msa_list <- subset_df[scores == 0,]
      #scores <- scores[scores != 0] # Drop
      #if (nrow(dropped_msa_list) != 0) print(dropped_msa_list)
      #scores[scores == 0] <- 1e-5

      scores
    })
    #print(all_scores)

    if (length(random_ratios) > 1) {

      png(paste(OUT_DIR, "/sample-", sample_number, "-",
        method, ".png", sep=""),
        height=600, width=1000, type="cairo")

      boxplot(all_scores,
        #ylab="GUIDANCE Score",
        #range=0, # no outliers
        #ylim = c(1e-5,1),
        axes=FALSE, ylab="",
        xlab="Amount of foreign residues after injection"
        #, log="y"
      )

      axis(2, seq(0,1,by=0.1), las=2)

      # Random ration labels
      rr <- round((random_ratios * 100))[2:length(random_ratios)]
      lables <- c("Original", sprintf("(%d%%, %d%%]", rr - 5, rr))

      axis(1, 1:length(lables), labels=lables)

      # TODO: This is a major checkpoint so report numbers of alignments
      title(paste("Sample-", sample_number, " (Means: ", 
      paste(sapply(all_scores, function(x){sprintf("%.3f", mean(x))}),
      sep="", collapse=" , "),
      ")",
      sep=""))

      dev.off()
    }
  })
}
